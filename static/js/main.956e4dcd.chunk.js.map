{"version":3,"sources":["modules/Utils.js","modules/InverseKinematics.js","modules/Mechanism.js","modules/Graphics.js","modules/MechanismGraphics.js","modules/Hud.js","context/VisualizerContext.js","ui/Settings.js","ui/Sidebar.js","ui/VisualizerDisplay.js","ui/Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["getEnumDefault","theEnum","smallestValue","key","v","properties","bIsDefault","sinBetween","min","max","t","speed","arguments","length","undefined","halfRange","Math","sin","calcServoAngle","q","B","a","s","beta","l","distanceTo","L","pow","M","z","N","cos","x","y","asin","sqrt","atan","pos_yAxis","THREE","DefaultParameters","dist_plat_ball_joint_lat","dist_plat_ball_joint_long","dist_plat_ball_joint_vert","dist_plat_stand_anchor_long","dist_plat_stand_anchor_lat","dist_plat_stand_anchor_vert","dist_servo_pitch_roll_vert","dist_servo_pitch_roll_long","dist_servo_pitch_roll_lat","mount_angle_servo_pitch_roll","length_servo_horn_pitch_roll","length_connecting_rod_pitch_roll","dist_servo_yaw_long","dist_servo_yaw_lat","dist_servo_yaw_vert","mount_angle_servo_yaw","PI","length_servo_horn_yaw","length_connecting_rod_yaw","Mechanism","params","_this","Object","classCallCheck","this","_super","call","_parameters","_base","Base","_servo_PitchRoll_left","Servo","_servo_PitchRoll_right","_servo_Yaw","_platformStand","PlatformStand","_platform","Platform","add","position","set","rotateY","rotateX","updateMatrixWorld","_clock","getServoYaw","getHorn","getBallJoint","getWorldPosition","getPointInBetweenByPerc","getServoPitchRollLeft","getPlatform","getBallJointLeft","getServoPitchRollRight","getBallJointRight","getBase","worldToLocal","getQVec_Left","getBVec_Left","getQVec_Right","getBVec_Right","a1","a2","p_world_desiredEndEffector","getPlatformStand","p_world_linkageOrigin","p_local_desiredEndEffector","subVectors","p","results","q2","acos","q1","push","solveIk2JointPlanar","setRotationFromAxisAngle","getServoAngle_Left","lookAt","getServoAngle_Right","getYawServoAngle","getElapsedTime","yawRange","pitchRange","rollRange","setFinalOrientation","yaw","pitch","roll","setRotationFromEuler","targetWorldPosition","sourcePoint","lookAtOrientation","setFromRotationMatrix","updateServos","long_dist_ball_joint","lat_dist_ball_joint","vertical_dist_ball_joint","_this2","_super3","_ballJoint","BallJoint","_this3","_super4","_ballJoint_left","_ballJoint_right","servoHornLength","_this4","_super5","_horn","ServoHorn","_this5","_super6","pointA","pointB","percentage","dir","clone","sub","len","normalize","multiplyScalar","pos_zAxis","CameraViewEnum","PERSPECTIVE","ORTHO_TOP","ORTHO_BOTTOM","ORTHO_FRONT","ORTHO_BACK","ORTHO_LEFT","ORTHO_RIGHT","1","value","name","displayName","2","3","4","5","6","7","BackgroundColorEnum","DARK_BLUE","GREY","WHITE","WARM","color","textOverlayColor","r","g","b","CameraControlsManager","theCameraManager","renderer","cameraManager","controls","controlsMap","bCameraControlsEnabled","theViewType","OrbitControls","camera","domElement","enableKeys","TrackballControls","noRotate","zoomSpeed","panSpeed","staticMoving","dynamicDampingFactor","previousViewType","reset","enabled","oldViewType","bEnabled","update","CameraManager","width","height","WIDTH","HEIGHT","currentViewType","orthoCam","perspectiveCam","startingOrthoCamDistance","startingPerspectiveCamPosition","changeCamera","getOrCreatePerspectiveCamera","setCameraView","getOrCreateOrthographicCamera","rotation","copy","up","Error","concat","ASPECT","zoom","theNewWidth","theNewHeight","aspect","updateProjectionMatrix","left","right","top","bottom","VisualizerSettings","currentBackgroundColor","distanceScale","colorChoice","MoveableTarget","Visualizer","settings","_settings","_width","_height","_scene","_renderer","_mount","_cameraManager","_cameraControlsManager","_mechanism","_target","_animHooks","_simulateMotion","mount","window","addEventListener","onCanvasResize","clientWidth","clientHeight","setClearColor","getDefaultBackgroundColorValue","setSize","append","initCamera","updateControlType","ambientLight","fog","addShadowedLight","plane","specular","receiveShadow","axisHelper","_transformControls","mechanism","meshUrlBase","process","meshUrlYawRod","meshUrlYawRodMount","meshUrlCenterPlatform","meshUrlServoPitchRollLeft","meshUrlServoPitchRollRight","meshUrlServoYaw","meshUrlServoHorn","meshUrlBallJoint","loader","STLLoader","materialBase","shininess","opacity","transparent","materialServo","materialServoHorn","materialBallJoint","load","geometry","mesh","castShadow","_loop","_arr$_i","slicedToArray","_arr","_i","servo","meshUrl","_loop2","bJoint","_arr2","_i2","scale","_i3","_arr3","addVisualMeshesToMechanism","animate","intensity","directionalLight","shadow","near","far","bias","hook","deactivateTargetMode","setCameraControlsEnabled","TransformControls","attach","detach","remove","dispose","console","log","updateAspectRatio","theBackgroundColor","setBackgroundColor","updateBackgroundColor","newColorVal","getCurrentBackgroundColorValue","requestAnimationFrame","updateControls","animateMechanism","forEach","render","simulateMotion","trackTarget","vectorToFixedString","fractionDigits","toFixed","MechanismDebugHudComponent","_isDisposed","_visualizer","_dispServoLeft","_dispServoHornLeft","_dispPlatformAnchorLeft","_dispConnectingRodLeft","_dispServoRight","_dispServoHornRight","_dispPlatformAnchorRight","_dispConnectingRodRight","_dispServoYaw","_dispServoHornYaw","_dispPlatformStandAnchorYaw","_dispConnectingRodYaw","elem","removeChild","visualizer","document","createElement","textContent","appendChild","updateElement","getConnectingRodMidPoint_Left_WorldPosition","getConnectingRodLength_Left","getConnectingRodMidPoint_Right_WorldPosition","getConnectingRodLength_Right","hornBjLeft","hornBjRight","platformAnchorLeft","platformAnchorRight","getYawConnectingRodMidPoint_WorldPosition","getYawConnectingRodLength","hornBjYaw","platformStandAnchor","dispElem","worldPosition","msg","project","style","transform","DebugHUD","_componentsByName","component","removeHudComponentByName","init","hasComponent","_Object$entries","entries","_Object$entries$_i","VisualizerStateContext","React","createContext","VisualizerDispatchContext","visualizerReducer","state","action","type","visualizerMount","debugHUD","hudMount","addAnimHook","changeView","view","changeBackgroundColor","activateTargetMode","addOrReplaceHUDComponentByName","VisualizerProvider","_ref","children","_React$useReducer","useReducer","_React$useReducer2","dispatch","react_default","Provider","Settings","useContext","vizContext","Button","variant","size","block","onClick","toggleMechanismSimulatedMotion","resetMechanismOrientation","Sidebar","Tabs","defaultActiveKey","id","Tab","eventKey","title","ui_Settings","disabled","VisualizerDisplay","context","className","ref","Component","contextType","CameraViewSelector","NavDropdown","keys","map","index","Item","BackgroundColorSelector","TargetControlSelector","Toolbar","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","App","Container","fluid","Row","Col","ui_Sidebar","xs","ui_Toolbar","src_ui_VisualizerDisplay","Boolean","location","hostname","match","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.956e4dcd.chunk.js","sourcesContent":["let getEnumDefault = (theEnum) => {\n  let smallestValue = null;\n  for (let key in theEnum) {\n    //don't consider the properties key\n    if (key === \"properties\") break;\n    // Look for indicator of default as an early exit\n    let v = theEnum[key];\n    if (theEnum.properties[v].bIsDefault) {\n      return v;\n    } else if (smallestValue == null || v < smallestValue) {\n      smallestValue = v;\n    }\n  }\n  return smallestValue;\n};\n\n//creates an array of length \"len\" and filled with the specified itm value\nlet createArray = (len, itm) => {\n  let arr1 = [itm],\n    arr2 = [];\n  while (len > 0) {\n    if (len & 1) arr2 = arr2.concat(arr1);\n    arr1 = arr1.concat(arr1);\n    len >>>= 1;\n  }\n  return arr2;\n};\n\nlet getEqualSpacedIntsFromRange = (min, max, numValues) => {\n  // calculate the range\n  let range = Math.abs(max - min);\n  let increment = Math.floor(range / (numValues - 1));\n\n  // check that the min is actually the min, and floor it\n  min = Math.floor(Math.min(min, max));\n\n  let values = [];\n  for (let i = 0; i < numValues; i++) {\n    values.push(min + i * increment);\n  }\n  return values;\n};\n\nlet createGUID = () => {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return (\n    s4() +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    s4() +\n    s4()\n  );\n};\n\n//converts a color encoded in javascript hex (ie: 0x000028) to css formatted hex string (ie: #000028)\nlet parseCSSColor = (color) => {\n  if (typeof color === \"number\") {\n    //make sure our hexadecimal number is padded out\n    color = \"#\" + (\"00000\" + (color | 0).toString(16)).substr(-6);\n  }\n  return color;\n};\n\n//calculates the contrasting color for determining overlay or text colors given a background\nlet getContrast50 = (hexcolor) => {\n  return parseInt(hexcolor, 16) > 0xffffff / 2 ? \"black\" : \"white\";\n};\n\nlet sinBetween = (min, max, t, speed = 1.0) => {\n  let halfRange = (max - min) / 2;\n  return min + halfRange + Math.sin(speed * t) * halfRange;\n};\n\nexport {\n  // Public Methods\n  getEnumDefault,\n  createArray,\n  getEqualSpacedIntsFromRange,\n  createGUID,\n  parseCSSColor,\n  getContrast50,\n  sinBetween,\n};\n","/**\n * Calculates the servo horn angle for a pitch/roll servos\n * using closed form inverse kinematic solution.\n *\n * @param {THREE.Vector3} q - base frame vector pointing to desired end effector (assume z up)\n * @param {THREE.Vector3} B - base frame vector pointing to center of servo arm rotation (assume z up)\n * @param {number} a - length of servo arm\n * @param {number} l - distance between the center of servo arm rotation and the desired end effector\n * @param {number} s - length of the connecting rod\n * @param {number} beta - angle of servo horn plane relative to the forward axis of the base\n * @return {number} the calculated servo angle\n */\nlet calcServoAngle = (q, B, a, s, beta) => {\n  const l = q.distanceTo(B); // dist between the center of servo arm rotation and the desired end effector\n  // Compute IK\n  let L = Math.pow(l, 2) - (Math.pow(s, 2) - Math.pow(a, 2));\n  let M = 2 * a * (q.z - B.z);\n  let N = 2 * a * (Math.cos(beta) * (q.x - B.x) + Math.sin(beta) * (q.y - B.y));\n\n  return (\n    Math.asin(L / Math.sqrt(Math.pow(M, 2) + Math.pow(N, 2))) - Math.atan(N / M)\n  );\n};\n\n/**\n * Calculates the 2 possible sets of joint angles for a 2 joint planar linkage\n * using closed form inverse kinematic solution.\n *\n * @param {THREE.Vector2} p - the desired position of the end effector (relative to the linkage origin, ex: servo horn pivot)\n * @param {number} a1 - length of the first linkage arm\n * @param {number} a2 - length of the second linkage arm\n * @return {Array.<{q1: Number, q2: Number}>} the 2 possible combinations of both joint angles (q1 and q2)\n */\nlet solveIk2JointPlanar = (p, a1, a2) => {\n  // soln 1\n  let results = []\n  let q2 = Math.acos((p.x*p.x + p.y*p.y - a1*a1 - a2*a2)/(2*a1*a2)); \n\n  let q1 = Math.atan(p.y/p.x) - Math.atan((a2*Math.sin(q2))/(a1 + a2*Math.cos(q2)));\n  results.push({\"q1\": q1,\"q2\": q2});\n  \n  // soln 2\n  q2 = -q2;\n  q1 = Math.atan(p.y/p.x) + Math.atan((a2*Math.sin(q2))/(a1 + a2*Math.cos(q2)));\n  results.push({\"q1\": q1,\"q2\": q2});\n  return results;\n};\n\nexport { calcServoAngle, solveIk2JointPlanar };\n","import * as THREE from \"three\";\nimport { calcServoAngle, solveIk2JointPlanar } from \"./InverseKinematics\";\nimport { sinBetween } from \"./Utils\";\n\nconst pos_yAxis = new THREE.Vector3(0, 1, 0);\n\nconst DefaultParameters = {\n  ////////////////////////////////////////////////////////////////////\n  // PLATFORM\n  ////////////////////////////////////////////////////////////////////\n  dist_plat_ball_joint_lat: 35.6235, // longitudinal distance between pivot center and an anchor\n  dist_plat_ball_joint_long: -29.9974, // lateral distance between pivot center and an anchor\n  dist_plat_ball_joint_vert: 0, // lateral distance between pivot center and an anchor\n\n  ////////////////////////////////////////////////////////////////////\n  // PLATFORM STAND / YAW ROD\n  ////////////////////////////////////////////////////////////////////\n  dist_plat_stand_anchor_long: -8.636, // longitudinal distance between the platform stand's center and an anchor\n  dist_plat_stand_anchor_lat: 0, // lateral distance between the platform stand's center and an anchor\n  dist_plat_stand_anchor_vert: -47.4726, // vertical distance between the base and platform stand's anchor\n\n  ////////////////////////////////////////////////////////////////////\n  // SERVO - PITCH ROLL\n  ////////////////////////////////////////////////////////////////////\n  // positions relative to mechanism's origin (ie: main pivot, center of rotation)\n  dist_servo_pitch_roll_vert: -28.2194, // vertical distance between pivot center and servo centers\n  dist_servo_pitch_roll_long: -29.9974, // longitudinal distance between the pivot center and a pitch roll servo\n  dist_servo_pitch_roll_lat: 10.7442, // lateral distance between the pivot center and a pitch roll servo\n  mount_angle_servo_pitch_roll: 0, // mount angle of the pitch roll servo\n  length_servo_horn_pitch_roll: 24.8793, // distance between servo horn axis of rotation and end anchor\n  length_connecting_rod_pitch_roll: 28.2194, // distance between two ball joints of a connecting rod\n\n  ////////////////////////////////////////////////////////////////////\n  // SERVO - YAW\n  ////////////////////////////////////////////////////////////////////\n  // positions relative to mechanism's origin (ie: main pivot, center of rotation)\n  dist_servo_yaw_long: 5.461, // longitudinal distance between the mechanism's pivot center and the yaw servo\n  dist_servo_yaw_lat: -25.2222, // lateral distance between the mechanism's pivot center and the yaw servo\n  dist_servo_yaw_vert: -47.4726, // vertical distance between the mechanism's pivot center and the yaw servo\n  mount_angle_servo_yaw: Math.PI / 2, // mount angle of the yaw servo\n  length_servo_horn_yaw: 14.097, // distance between servo horn axis of rotation and end anchor\n  length_connecting_rod_yaw: 25.2222, // distance between two ball joints of a connecting rod\n};\n\nclass Mechanism extends THREE.Group {\n  constructor(params) {\n    super();\n\n    // read parameters\n    this._parameters = params === undefined ? DefaultParameters : params;\n\n    // create children\n    this._base = new Base();\n    this._servo_PitchRoll_left = new Servo(\n      this._parameters.length_servo_horn_pitch_roll,\n    );\n    this._servo_PitchRoll_right = new Servo(\n      this._parameters.length_servo_horn_pitch_roll,\n    );\n    this._servo_Yaw = new Servo(\n      this._parameters.length_servo_horn_yaw,\n    );\n    this._platformStand = new PlatformStand(\n      this._parameters.dist_plat_stand_anchor_long,\n      this._parameters.dist_plat_stand_anchor_lat,\n      this._parameters.dist_plat_stand_anchor_vert\n    );\n    this._platform = new Platform(\n      this._parameters.dist_plat_ball_joint_long,\n      this._parameters.dist_plat_ball_joint_lat,\n      this._parameters.dist_plat_ball_joint_vert\n    );\n\n    // Stand -> Platform\n    this._platformStand.add(this._platform);\n\n    // Base -> Stand\n    this._platformStand.position.set(0, 0, 0);\n    this._base.add(this._platformStand);\n\n    // Base -> Servo Yaw\n    this._servo_Yaw.position.set(\n      this._parameters.dist_servo_yaw_lat,\n      this._parameters.dist_servo_yaw_vert,\n      this._parameters.dist_servo_yaw_long\n    );\n    this._servo_Yaw.rotateY(this._parameters.mount_angle_servo_yaw);\n    this._base.add(this._servo_Yaw);\n\n    // Base -> Servo Left\n    this._servo_PitchRoll_left.position.set(\n      this._parameters.dist_servo_pitch_roll_lat,\n      this._parameters.dist_servo_pitch_roll_vert,\n      this._parameters.dist_servo_pitch_roll_long\n    );\n    this._servo_PitchRoll_left.rotateX(Math.PI / 2);\n    this._servo_PitchRoll_left.rotateY(-Math.PI / 2);\n    this._servo_PitchRoll_left.rotateX(\n      this._parameters.mount_angle_servo_pitch_roll\n    );\n    this._base.add(this._servo_PitchRoll_left);\n\n    // Base -> Servo Right\n    this._servo_PitchRoll_right.position.set(\n      -this._parameters.dist_servo_pitch_roll_lat,\n      this._parameters.dist_servo_pitch_roll_vert,\n      this._parameters.dist_servo_pitch_roll_long\n    );\n    this._servo_PitchRoll_right.rotateX(Math.PI / 2);\n    this._servo_PitchRoll_right.rotateY(-Math.PI / 2);\n    this._servo_PitchRoll_right.rotateX(\n      -this._parameters.mount_angle_servo_pitch_roll\n    );\n    this._base.add(this._servo_PitchRoll_right);\n\n    // Mechanism -> Base\n    this.add(this._base);\n\n    // post init\n    this.updateMatrixWorld();\n\n    //\n    this._clock = new THREE.Clock();\n  }\n\n  getPlatform() {\n    return this._platform;\n  }\n\n  getPlatformStand() {\n    return this._platformStand;\n  }\n\n  getBase() {\n    return this._base;\n  }\n\n  getServoPitchRollLeft() {\n    return this._servo_PitchRoll_left;\n  }\n\n  getServoPitchRollRight() {\n    return this._servo_PitchRoll_right;\n  }\n\n  getServoYaw() {\n    return this._servo_Yaw;\n  }\n\n  getYawConnectingRodLength() {\n    return this.getServoYaw()\n      .getHorn()\n      .getBallJoint()\n      .getWorldPosition(new THREE.Vector3())\n      .distanceTo(\n        this._platformStand.getBallJoint().getWorldPosition(new THREE.Vector3())\n      );\n  }\n\n  getYawConnectingRodMidPoint_WorldPosition() {\n    return getPointInBetweenByPerc(\n      this.getServoYaw()\n        .getHorn()\n        .getBallJoint()\n        .getWorldPosition(new THREE.Vector3()),\n      this._platformStand.getBallJoint().getWorldPosition(new THREE.Vector3()),\n      0.5\n    );\n  }\n\n  getConnectingRodLength_Left() {\n    return this.getServoPitchRollLeft()\n      .getHorn()\n      .getBallJoint()\n      .getWorldPosition(new THREE.Vector3())\n      .distanceTo(\n        this.getPlatform().getBallJointLeft().getWorldPosition(new THREE.Vector3())\n      );\n  }\n\n  getConnectingRodLength_Right() {\n    return this.getServoPitchRollRight()\n      .getHorn()\n      .getBallJoint()\n      .getWorldPosition(new THREE.Vector3())\n      .distanceTo(\n        this.getPlatform().getBallJointRight().getWorldPosition(new THREE.Vector3())\n      );\n  }\n\n  getConnectingRodMidPoint_Left_WorldPosition() {\n    return getPointInBetweenByPerc(\n      this.getServoPitchRollLeft()\n        .getHorn()\n        .getBallJoint()\n        .getWorldPosition(new THREE.Vector3()),\n      this.getPlatform().getBallJointLeft().getWorldPosition(new THREE.Vector3()),\n      0.5\n    );\n  }\n\n  getConnectingRodMidPoint_Right_WorldPosition() {\n    return getPointInBetweenByPerc(\n      this.getServoPitchRollRight()\n        .getHorn()\n        .getBallJoint()\n        .getWorldPosition(new THREE.Vector3()),\n      this.getPlatform().getBallJointRight().getWorldPosition(new THREE.Vector3()),\n      0.5\n    );\n  }\n\n  // base frame vector from origin of base to platform anchor point\n  getQVec_Left() {\n    // initialize with the world position of the platform anchor point\n    // then convert the world position to local \"base\" space\n    return this.getBase().worldToLocal(\n      this.getPlatform()\n        .getBallJointLeft()\n        .getWorldPosition(new THREE.Vector3())\n    );\n  }\n\n  // base frame vector from origin of base to platform anchor point\n  getQVec_Right() {\n    // initialize with the world position of the platform anchor point\n    // then convert the world position to local \"base\" space\n    return this.getBase().worldToLocal(\n      this.getPlatform()\n        .getBallJointRight()\n        .getWorldPosition(new THREE.Vector3())\n    );\n  }\n\n  // base frame vector from origin of base to center of servo arm rotation\n  getBVec_Left() {\n    // initialize with the world position of the center of servo arm rotation\n    // then convert the world position to local \"base\" space\n    return this.getBase().worldToLocal(\n      this.getServoPitchRollLeft()\n        .getHorn()\n        .getWorldPosition(new THREE.Vector3())\n    );\n  }\n\n  // base frame vector from origin of base to center of servo arm rotation\n  getBVec_Right() {\n    // initialize with the world position of the center of servo arm rotation\n    // then convert the world position to local \"base\" space\n    return this.getBase().worldToLocal(\n      this.getServoPitchRollRight()\n        .getHorn()\n        .getWorldPosition(new THREE.Vector3())\n    );\n  }\n\n  // FIXME: currently leveraging a simulated reflection so the math works...\n  // would be nice to resolve for expected coordinate system\n  getServoAngle_Left() {\n    // base frame vector to desired end effector (platform anchor point)\n    let q = this.getQVec_Left();\n    // base frame vector to center of servo arm rotation\n    let B = this.getBVec_Left();\n    // length of servo arm\n    let a = this._parameters.length_servo_horn_pitch_roll;\n    // length of the connecting rod\n    let s = this._parameters.length_connecting_rod_pitch_roll;\n    // angle of servo horn plane relative to base forward axis\n    let beta = Math.PI + this._parameters.mount_angle_servo_pitch_roll;\n\n    // the calculated servo angle (expects vectors with for Z-up)\n    return (\n      Math.PI +\n      calcServoAngle(\n        // simulate reflection of q and B vecs so the math from the flip scenario applies\n        new THREE.Vector3(-q.x, q.z, q.y),\n        new THREE.Vector3(-B.x, B.z, B.y),\n        a,\n        s,\n        beta\n      )\n    );\n  }\n\n  getServoAngle_Right() {\n    // base frame vector to desired end effector (platform anchor point)\n    let q = this.getQVec_Right();\n    // base frame vector to center of servo arm rotation\n    let B = this.getBVec_Right();\n    // length of servo arm\n    let a = this._parameters.length_servo_horn_pitch_roll;\n    // length of the connecting rod\n    let s = this._parameters.length_connecting_rod_pitch_roll;\n    // angle of servo horn plane relative to base forward axis\n    let beta = Math.PI - this._parameters.mount_angle_servo_pitch_roll;\n    // the calculated servo angle (expects vectors with Z-up)\n    return -calcServoAngle(\n      new THREE.Vector3(q.x, q.z, q.y),\n      new THREE.Vector3(B.x, B.z, B.y),\n      a,\n      s,\n      beta\n    );\n  }\n\n  getYawServoAngle() {\n    const a1 = this._parameters.length_servo_horn_yaw;\n    const a2 = this._parameters.length_connecting_rod_yaw;\n\n    // define the position of the target point for the ik solution\n    const p_world_desiredEndEffector = this.getPlatformStand()\n      .getBallJoint()\n      .getWorldPosition(new THREE.Vector3());\n    const p_world_linkageOrigin = this.getServoYaw()\n      .getHorn()\n      .getWorldPosition(new THREE.Vector3());\n    // calculate a vector pointing from servo horn pivot toward the yaw anchor\n    let p_local_desiredEndEffector = new THREE.Vector3();\n    p_local_desiredEndEffector.subVectors(\n      p_world_desiredEndEffector,\n      p_world_linkageOrigin\n    );\n    // Only consider 2d plane\n    p_local_desiredEndEffector = new THREE.Vector2(\n      -p_local_desiredEndEffector.z,\n      -p_local_desiredEndEffector.x\n    );\n    let ikSolns = solveIk2JointPlanar(p_local_desiredEndEffector, a1, a2);\n    let q = ikSolns[0][\"q2\"];\n    return q;\n  }\n\n  updateServos() {\n    // Animate servo horns\n    this.getServoPitchRollLeft()\n      .getHorn()\n      .setRotationFromAxisAngle(pos_yAxis, this.getServoAngle_Left());\n    this.getServoPitchRollLeft()\n      .getHorn()\n      .getBallJoint()\n      .lookAt(\n        this.getPlatform().getBallJointLeft().getWorldPosition(new THREE.Vector3())\n      );\n\n    this.getServoPitchRollRight()\n      .getHorn()\n      .setRotationFromAxisAngle(pos_yAxis, this.getServoAngle_Right());\n    this.getServoPitchRollRight()\n      .getHorn()\n      .getBallJoint()\n      .lookAt(\n        this.getPlatform()\n          .getBallJointRight()\n          .getWorldPosition(new THREE.Vector3())\n      );\n\n    this.getServoYaw()\n      .getHorn()\n      .setRotationFromAxisAngle(pos_yAxis, this.getYawServoAngle());\n\n    this.getServoYaw()\n      .getHorn()\n      .getBallJoint()\n      .lookAt(\n        this.getPlatformStand()\n          .getBallJoint()\n          .getWorldPosition(new THREE.Vector3())\n      );\n  }\n\n  simulateMotion() {\n    let t = this._clock.getElapsedTime();\n\n    // oscillate roll pitch and yaw within desired ranges\n    let yawRange = Math.PI / 10;\n    let pitchRange = Math.PI / 20;\n    let rollRange = Math.PI / 30;\n\n    this.setFinalOrientation(\n      sinBetween(yawRange, -yawRange, t, 0.5), // yaw\n      sinBetween(pitchRange, -pitchRange, 0.5 * t, 0.5), // pitch\n      sinBetween(rollRange, -rollRange, t, 5) // roll\n    );\n  }\n\n  setFinalOrientation(yaw, pitch, roll) {\n    // YAW (accomplished by rotating the platform stand)\n    this.getPlatformStand().setRotationFromAxisAngle(pos_yAxis, yaw);\n    // Orient the platform stand ball joint\n    this.getPlatformStand()\n      .getBallJoint()\n      .lookAt(\n        this.getServoYaw()\n          .getHorn()\n          .getBallJoint()\n          .getWorldPosition(new THREE.Vector3())\n      );\n\n    // PITCH + Roll (accomplished by rotating the platform)\n    this.getPlatform().setRotationFromEuler(new THREE.Euler(pitch, 0, roll, \"XYZ\"));\n\n    // Orient the platform ball joints\n    this.getPlatform()\n      .getBallJointLeft()\n      .lookAt(\n        this.getServoPitchRollLeft()\n          .getHorn()\n          .getBallJoint()\n          .getWorldPosition(new THREE.Vector3())\n      );\n    this.getPlatform()\n      .getBallJointRight()\n      .lookAt(\n        this.getServoPitchRollRight()\n          .getHorn()\n          .getBallJoint()\n          .getWorldPosition(new THREE.Vector3())\n      );\n  }\n\n  trackTarget(targetWorldPosition) {\n    const sourcePoint = this.getPlatform().getWorldPosition(new THREE.Vector3());\n    const lookAtOrientation = new THREE.Euler().setFromRotationMatrix(\n      new THREE.Matrix4().lookAt(\n        sourcePoint, // eye\n        targetWorldPosition, // center\n        pos_yAxis // up vector\n      )\n    );\n    this.setFinalOrientation(\n      -lookAtOrientation.y, // yaw\n      Math.PI + lookAtOrientation.x, // pitch\n      Math.PI + lookAtOrientation.z // roll\n    );\n  }\n\n  animate() {\n    this.updateServos();\n  }\n}\n\nclass Base extends THREE.Group { }\n\n// PlatformStand (Class): A StewartSimulator Mechanical Module class.\n//   Represents a platform stand.\nclass PlatformStand extends THREE.Group {\n  constructor(\n    long_dist_ball_joint,\n    lat_dist_ball_joint,\n    vertical_dist_ball_joint,\n  ) {\n    super();\n    // Ball Joint\n    this._ballJoint = new BallJoint();\n    this._ballJoint.position.set(\n      lat_dist_ball_joint,\n      vertical_dist_ball_joint,\n      long_dist_ball_joint\n    );\n    this.add(this._ballJoint);\n  }\n\n  getBallJoint() {\n    return this._ballJoint;\n  }\n}\n\n// Platform (Class): A StewartSimulator Mechanical Module class.\n//   Represents a platform.\nclass Platform extends THREE.Group {\n  constructor(\n    dist_plat_ball_joint_long,\n    dist_plat_ball_joint_lat,\n    dist_plat_ball_joint_vert,\n  ) {\n    super();\n\n    // create children\n    this._ballJoint_left = new BallJoint();\n    this._ballJoint_left.position.set(\n      dist_plat_ball_joint_lat,\n      dist_plat_ball_joint_vert,\n      dist_plat_ball_joint_long\n    );\n    this.add(this._ballJoint_left);\n\n    this._ballJoint_right = new BallJoint();\n    this._ballJoint_right.position.set(\n      -dist_plat_ball_joint_lat,\n      dist_plat_ball_joint_vert,\n      dist_plat_ball_joint_long\n    );\n    this.add(this._ballJoint_right);\n  }\n\n  getBallJointLeft() {\n    return this._ballJoint_left;\n  }\n\n  getBallJointRight() {\n    return this._ballJoint_right;\n  }\n}\n\n// Servo (Class): A StewartSimulator Mechanical Module class.\n//   Represents a servo.\nclass Servo extends THREE.Group {\n  constructor(\n    servoHornLength,\n  ) {\n    super();\n    // create children\n    this._horn = new ServoHorn(servoHornLength);\n    // this._horn.position.set(0, 5, 0);\n    this.add(this._horn);\n  }\n\n  getHorn() {\n    return this._horn;\n  }\n}\n\n// ServoHorn (Class): A StewartSimulator Mechanical Module class.\n//   Represents a servo horn.\nclass ServoHorn extends THREE.Group {\n  constructor(\n    length,\n  ) {\n    super();\n\n    this._ballJoint = new BallJoint();\n    this._ballJoint.position.set(0, 0, length);\n    this.add(this._ballJoint);\n  }\n\n  getBallJoint() {\n    return this._ballJoint;\n  }\n}\n\n// BallJoint (Class): A StewartSimulator Mechanical Module class.\n//  Represents a ball joint.\nclass BallJoint extends THREE.Group { }\n\nfunction getPointInBetweenByPerc(pointA, pointB, percentage) {\n  var dir = pointB.clone().sub(pointA);\n  var len = dir.length();\n  dir = dir.normalize().multiplyScalar(len * percentage);\n  return pointA.clone().add(dir);\n}\n\nclass HeadlessSimulation {\n  constructor() {\n    this._simulateMotion = false;\n    this._lookAtWorldPosition = null;\n    this._scene = new THREE.Scene();\n    this._mechanism = new Mechanism();\n    this._scene.add(this._mechanism);\n    this.animateMechanism();\n    this._mechanism.setFinalOrientation(0, 0, 0);\n  }\n\n  toggleMechanismSimulatedMotion() {\n    this._simulateMotion = !this._simulateMotion;\n  }\n\n  animateMechanism() {\n    requestAnimationFrame(() => this.animateMechanism());\n    if (this._mechanism == null || this._mechanism === undefined) {\n      return;\n    }\n    if (this._simulateMotion) {\n      this._mechanism.simulateMotion();\n    }\n    else if (this._lookAtWorldPosition) {\n      this._mechanism.trackTarget(\n        this._lookAtWorldPosition\n      );\n    }\n\n    this._mechanism.animate();\n  }\n}\n\nexport { Mechanism, HeadlessSimulation };\n","import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { TrackballControls } from \"three/examples/jsm/controls/TrackballControls.js\";\nimport { TransformControls } from \"three/examples/jsm/controls/TransformControls.js\";\nimport { getEnumDefault } from \"./Utils\";\nimport { Mechanism } from \"./Mechanism\";\nimport { addVisualMeshesToMechanism } from \"./MechanismGraphics\";\n\n// const pos_xAxis = new THREE.Vector3(1, 0, 0);\n// const neg_xAxis = new THREE.Vector3(-1, 0, 0);\nconst pos_yAxis = new THREE.Vector3(0, 1, 0);\n// const neg_yAxis = new THREE.Vector3(0, -1, 0);\nconst pos_zAxis = new THREE.Vector3(0, 0, 1);\n// const neg_zAxis = new THREE.Vector3(0, 0, -1);\n// const scene_origin = new THREE.Vector3(0, 0, 0);\n\nconst CameraViewEnum = {\n  PERSPECTIVE: 1,\n  ORTHO_TOP: 2,\n  ORTHO_BOTTOM: 3,\n  ORTHO_FRONT: 4,\n  ORTHO_BACK: 5,\n  ORTHO_LEFT: 6,\n  ORTHO_RIGHT: 7,\n\n  properties: {\n    1: {\n      value: 1,\n      name: \"PERSPECTIVE\",\n      displayName: \"Free Cam\",\n      bIsDefault: true,\n    },\n    2: {\n      value: 2,\n      name: \"ORTHO_TOP\",\n      displayName: \"Top View\",\n    },\n    3: {\n      value: 3,\n      name: \"ORTHO_BOTTOM\",\n      displayName: \"Bottom View\",\n    },\n    4: {\n      value: 4,\n      name: \"ORTHO_FRONT\",\n      displayName: \"Front View\",\n    },\n    5: {\n      value: 5,\n      name: \"ORTHO_BACK\",\n      displayName: \"Back View\",\n    },\n    6: {\n      value: 6,\n      name: \"ORTHO_LEFT\",\n      displayName: \"Left View\",\n    },\n    7: {\n      value: 7,\n      name: \"ORTHO_RIGHT\",\n      displayName: \"Right View\",\n    },\n  },\n};\n\nconst BackgroundColorEnum = {\n  DARK_BLUE: 1,\n  GREY: 2,\n  WHITE: 3,\n  WARM: 4,\n\n  properties: {\n    1: {\n      value: 1,\n      name: \"DARK_BLUE\",\n      color: 0x151c25,\n      displayName: \"Dark Blue\",\n      bIsDefault: false,\n      textOverlayColor: { r: 255, g: 255, b: 255, a: 1.0 },\n    },\n    2: {\n      value: 2,\n      name: \"GREY\",\n      color: 0xb0b0b0,\n      displayName: \"Grey\",\n      bIsDefault: false,\n      textOverlayColor: { r: 0, g: 0, b: 0, a: 1.0 },\n    },\n    3: {\n      value: 3,\n      name: \"WHITE\",\n      color: 0xffffff,\n      displayName: \"White\",\n      bIsDefault: false,\n      textOverlayColor: { r: 0, g: 0, b: 0, a: 1.0 },\n    },\n    4: {\n      value: 4,\n      name: \"WARM\",\n      color: 0x72645b,\n      displayName: \"Warm\",\n      bIsDefault: true,\n      textOverlayColor: { r: 0, g: 0, b: 0, a: 1.0 },\n    },\n  },\n};\n\n// CameraControlsManager (Class): A StewartSimulator Graphics module class.\n// Manages switching between various sets of controls for each view.\nclass CameraControlsManager {\n  constructor(theCameraManager, renderer) {\n    this.cameraManager = theCameraManager;\n    this.renderer = renderer;\n    this.controls = null;\n    this.controlsMap = {};\n    this.bCameraControlsEnabled = true;\n  }\n\n  //update the current camera controls to match the view type specified... create appropriate controls if they don't exist\n  updateControlType(theViewType) {\n    //if the controls for this view type haven't been initialized, create them\n    if (!(theViewType in this.controlsMap)) {\n      if (theViewType === CameraViewEnum.PERSPECTIVE) {\n        this.controlsMap[theViewType] = new OrbitControls(\n          this.cameraManager.camera,\n          this.renderer.domElement\n        );\n        this.controlsMap[theViewType].enableKeys = false;\n      } else {\n        this.controlsMap[theViewType] = new TrackballControls(\n          this.cameraManager.camera,\n          this.renderer.domElement\n        );\n        this.controlsMap[theViewType].noRotate = true;\n        this.controlsMap[theViewType].zoomSpeed = 1.5;\n        this.controlsMap[theViewType].panSpeed = 10;\n        this.controlsMap[theViewType].staticMoving = true;\n        this.controlsMap[theViewType].dynamicDampingFactor = 0.3;\n      }\n    }\n\n    //special case where the previous and current view types are the same (ie: just resetting the camera)\n    if (theViewType === this.cameraManager.previousViewType) {\n      this.controls.reset();\n      //set the new controls to enabled if not in tool mode\n      this.controls.enabled = this.bCameraControlsEnabled;\n      return;\n    }\n\n    //use the appropriate controls\n    this.controls = this.controlsMap[theViewType];\n    //reset the appropriate controls\n    this.controls.reset();\n\n    //disable the old controls\n    let oldViewType = this.cameraManager.previousViewType;\n    if (oldViewType in this.controlsMap) {\n      this.controlsMap[oldViewType].enabled = false;\n    }\n\n    //set the new controls to enabled if not in tool mode\n    this.controls.enabled = this.bCameraControlsEnabled;\n  }\n\n  toggleCameraControls() {\n    //toggle the camera controls\n    this.bCameraControlsEnabled = !this.bCameraControlsEnabled;\n    //set the enabled property of the current controls\n    this.controls.enabled = this.bCameraControlsEnabled;\n  }\n\n  setCameraControlsEnabled(bEnabled) {\n    this.bCameraControlsEnabled = bEnabled;\n    this.controls.enabled = this.bCameraControlsEnabled;\n  }\n\n  updateControls() {\n    this.controls.update();\n  }\n}\n\n// CameraManager (Class): A StewartSimulator Graphics module class.\n//  Manages switching between various cameras used for different views.\nclass CameraManager {\n  constructor(width, height) {\n    this.WIDTH = width;\n    this.HEIGHT = height;\n    this.camera = null;\n    this.currentViewType = null;\n    this.previousViewType = null;\n    this.orthoCam = null;\n    this.perspectiveCam = null;\n    this.startingOrthoCamDistance = 125;\n    this.startingPerspectiveCamPosition = new THREE.Vector3(125, 50, 70);\n  }\n  //initialize the camera to a perspective view\n  initCamera() {\n    this.changeCamera(getEnumDefault(CameraViewEnum));\n  }\n\n  //Switches the camera type and camera pose to match the view type\n  changeCamera(theViewType) {\n    switch (theViewType) {\n      case CameraViewEnum.PERSPECTIVE:\n        this.camera = this.getOrCreatePerspectiveCamera();\n        this.setCameraView(theViewType);\n        break;\n      default:\n        this.camera = this.getOrCreateOrthographicCamera();\n        this.setCameraView(theViewType);\n        break;\n    }\n\n    this.previousViewType = this.currentViewType;\n    this.currentViewType = theViewType;\n  }\n\n  //sets the pose of the camera to match the desired view type\n  setCameraView(theViewType) {\n    this.camera.rotation.set(0, 0, 0);\n    switch (theViewType) {\n      case CameraViewEnum.PERSPECTIVE:\n        this.camera.position.copy(this.startingPerspectiveCamPosition);\n        break;\n      case CameraViewEnum.ORTHO_FRONT:\n        this.camera.position.set(0, 0, this.startingOrthoCamDistance);\n        this.camera.up = pos_yAxis; //set up vectors so that the pan function from the TrackballControls will work properly\n        break;\n      case CameraViewEnum.ORTHO_BACK:\n        this.camera.position.set(0, 0, -this.startingOrthoCamDistance);\n        this.camera.up = pos_yAxis;\n        break;\n      case CameraViewEnum.ORTHO_LEFT:\n        this.camera.position.set(-this.startingOrthoCamDistance, 0, 0);\n        this.camera.up = pos_yAxis;\n        break;\n      case CameraViewEnum.ORTHO_RIGHT:\n        this.camera.position.set(this.startingOrthoCamDistance, 0, 0);\n        this.camera.up = pos_yAxis;\n        break;\n      case CameraViewEnum.ORTHO_TOP:\n        this.camera.position.set(0, this.startingOrthoCamDistance, 0);\n        this.camera.up = pos_zAxis;\n        break;\n      case CameraViewEnum.ORTHO_BOTTOM:\n        this.camera.position.set(0, -this.startingOrthoCamDistance, 0);\n        this.camera.up = pos_zAxis;\n        break;\n      default:\n        throw Error(`Unexpected viewtype: ${theViewType}.`);\n    }\n  }\n\n  //retrieves the perspective camera or creates one if it doesn't exist\n  getOrCreatePerspectiveCamera() {\n    if (!this.perspectiveCam) {\n      // set some camera attributes\n      let FOV = 90,\n        ASPECT = this.WIDTH / this.HEIGHT,\n        NEAR = 0.1,\n        FAR = 10000;\n\n      this.perspectiveCam = new THREE.PerspectiveCamera(FOV, ASPECT, NEAR, FAR);\n    }\n    return this.perspectiveCam;\n  }\n\n  //retrieves the orthographic camera or creates one if it doesn't exist\n  getOrCreateOrthographicCamera() {\n    if (!this.orthoCam) {\n      this.orthoCam = new THREE.OrthographicCamera(\n        this.WIDTH / -2,\n        this.WIDTH / 2,\n        this.HEIGHT / 2,\n        this.HEIGHT / -2,\n        0.1,\n        10000\n      );\n      // starting zoom\n      this.orthoCam.zoom = 12.0;\n    }\n    return this.orthoCam;\n  }\n\n  //update the aspect ratio of cameras, for use in the event of a resized window\n  updateAspectRatio(theNewWidth, theNewHeight) {\n    //note the new dimensions\n    this.WIDTH = theNewWidth;\n    this.HEIGHT = theNewHeight;\n\n    //update the perspective camera if it's been created\n    if (this.perspectiveCam) {\n      this.perspectiveCam.aspect = this.WIDTH / this.HEIGHT;\n      this.perspectiveCam.updateProjectionMatrix();\n    }\n\n    //update the orthographic camera if it's been created\n    if (this.orthoCam) {\n      this.orthoCam.left = this.WIDTH / -2;\n      this.orthoCam.right = this.WIDTH / 2;\n      this.orthoCam.top = this.HEIGHT / 2;\n      this.orthoCam.bottom = this.HEIGHT / -2;\n      this.orthoCam.updateProjectionMatrix();\n    }\n  }\n}\n\n// VisualizerSettings (Class): A StewartSimulator Graphics module class.\n//  Maintains all the settings for a visualizer.\nclass VisualizerSettings {\n  constructor() {\n    this.currentBackgroundColor = getEnumDefault(BackgroundColorEnum);\n    this.distanceScale = 1.0;\n  }\n\n  getCurrentBackgroundColorValue() {\n    return BackgroundColorEnum.properties[this.currentBackgroundColor].color;\n  }\n\n  getDefaultBackgroundColorValue() {\n    return BackgroundColorEnum.properties[getEnumDefault(BackgroundColorEnum)]\n      .color;\n  }\n\n  setBackgroundColor(colorChoice) {\n    this.currentBackgroundColor = colorChoice;\n  }\n}\n\nclass MoveableTarget extends THREE.Mesh {\n  constructor() {\n    super(\n      new THREE.SphereGeometry(5, 32, 32),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 })\n    );\n  }\n}\n\n// Visualizer (Class): A StewartSimulator Graphics module class.\n// Manages the graphical visualization of the platform. Uses WebGL via THREE.js\nclass Visualizer {\n  constructor(settings = new VisualizerSettings()) {\n    this._settings = settings;\n    this._width = null;\n    this._height = null;\n    this._scene = null;\n    this._renderer = null;\n    this._mount = null;\n    this._cameraManager = null;\n    this._cameraControlsManager = null;\n    this._mechanism = null;\n    this._target = null;\n    this._animHooks = null;\n    this._simulateMotion = false;\n  }\n\n  init(mount) {\n    window.addEventListener(\"resize\", () => this.onCanvasResize(), false);\n\n    this._mount = mount;\n    this._width = this._mount.clientWidth;\n    this._height = this._mount.clientHeight;\n\n    this._scene = new THREE.Scene();\n\n    this._renderer = new THREE.WebGLRenderer();\n    this._renderer.setClearColor(\n      this._settings.getDefaultBackgroundColorValue()\n    );\n    this._renderer.setSize(this._width, this._height);\n\n    this._mount.append(this._renderer.domElement);\n\n    ////////////////////////////////////////////////////////////////////\n    //Initialize the camera manager which will manage switching between various camera views\n    this._cameraManager = new CameraManager(this._width, this._height);\n    this._cameraManager.initCamera();\n    this._scene.add(this._cameraManager.camera);\n\n    ////////////////////////////////////////////////////////////////////\n    //Initialize the camera controls manager which will manage the controls for each camera view\n    this._cameraControlsManager = new CameraControlsManager(\n      this._cameraManager,\n      this._renderer\n    );\n    this._cameraControlsManager.updateControlType(\n      this._cameraManager.currentViewType\n    );\n\n    ////////////////////////////////////////////////////////////////////\n    //Initialize the lighting for the scene\n    //create an ambient light\n    let ambientLight = new THREE.AmbientLight(0xffffff);\n    this._scene.add(ambientLight);\n\n    this._scene.fog = new THREE.Fog(0x72645b, 2, 1500);\n    this._scene.add(new THREE.HemisphereLight(0x443333, 0x111122));\n    // this.addShadowedLight( 100, 100, 0, 0xffffff, 1.35 );\n    this.addShadowedLight(0.5, 1, - 1, 0xffaa00, 1);\n\n    const plane = new THREE.Mesh(\n      new THREE.PlaneGeometry(10000, 10000),\n      new THREE.MeshPhongMaterial({ color: 0x999999, specular: 0x101010 })\n    );\n    plane.rotation.x = -Math.PI / 2;\n    plane.position.y = -200;\n    this._scene.add(plane);\n\n    plane.receiveShadow = true;\n\n    ////////////////////////////////////////////////////////////////////\n    //Setup the actual world geometry using the template meshes where appropriate\n    //An axis object to visualize the the 3 axes in a simple way.\n    //The X axis is red. The Y axis is green. The Z axis is blue.\n    let axisHelper = new THREE.AxesHelper(250 * this._settings.distanceScale);\n    this._scene.add(axisHelper);\n\n    ////////////////////////////////////////////////////////////////////\n    this._target = new MoveableTarget();\n    this._target.position.set(0, 25, 100);\n    this._scene.add(this._target);\n    this._transformControls = null;\n\n    ////////////////////////////////////////////////////////////////////\n    this._animHooks = [];\n\n    ////////////////////////////////////////////////////////////////////\n    this._mechanism = new Mechanism();\n    addVisualMeshesToMechanism(this._mechanism);\n    \n    this._scene.add(this._mechanism);\n    \n    ////////////////////////////////////////////////////////////////////\n    this.animate();\n    this._mechanism.setFinalOrientation(0, 0, 0);\n  }\n\n  addShadowedLight(x, y, z, color, intensity) {\n    const directionalLight = new THREE.DirectionalLight(color, intensity);\n    directionalLight.position.set(x, y, z);\n    this._scene.add(directionalLight);\n\n    directionalLight.castShadow = true;\n\n    const d = 1;\n    directionalLight.shadow.camera.left = -d;\n    directionalLight.shadow.camera.right = d;\n    directionalLight.shadow.camera.top = d;\n    directionalLight.shadow.camera.bottom = -d;\n\n    directionalLight.shadow.camera.near = 1;\n    directionalLight.shadow.camera.far = 400;\n\n    directionalLight.shadow.bias = -0.002;\n  }\n\n  toggleMechanismSimulatedMotion() {\n    this._simulateMotion = !this._simulateMotion;\n  }\n\n  resetMechanismOrientation() {\n    if (this._mechanism === undefined || this._mechanism === null) {\n      return;\n    }\n    this._mechanism.setFinalOrientation(0, 0, 0);\n  }\n\n  addAnimHook(hook) {\n    this._animHooks.push(hook);\n  }\n\n  activateTargetMode() {\n    this.deactivateTargetMode();\n    this._cameraControlsManager.setCameraControlsEnabled(false);\n    this._transformControls = new TransformControls(\n      this._cameraManager.camera,\n      this._mount\n    );\n    this._transformControls.attach(this._target);\n    this._scene.add(this._transformControls);\n  }\n\n  deactivateTargetMode() {\n    if (\n      this._transformControls === undefined ||\n      this._transformControls === null\n    ) {\n      return;\n    }\n    this._transformControls.detach();\n    this._scene.remove(this._transformControls);\n    this._transformControls.dispose();\n    this._transformControls = null;\n    this._cameraControlsManager.setCameraControlsEnabled(true);\n  }\n\n  //Change the camera to the specified view and udpate the controls\n  changeView(theViewType) {\n    console.log(\n      this._cameraManager.camera.position,\n      this._cameraManager.camera.rotation\n    );\n    //remove the camera from the scene, change it and then add it back\n    this._scene.remove(this._cameraManager.camera);\n    this._cameraManager.changeCamera(theViewType);\n    this._scene.add(this._cameraManager.camera);\n\n    //update the camera controls\n    this._cameraControlsManager.updateControlType(theViewType);\n  }\n\n  //update the canvas and camera whenever the window is resized\n  onCanvasResize() {\n    //retrieve the new dimensions of the canvas' parent div\n    this._width = this._mount.clientWidth;\n    this._height = this._mount.clientHeight;\n\n    //update the aspect ratio of the cameras\n    this._cameraManager.updateAspectRatio(this._width, this._height);\n\n    //update the size of the canvas to fill its parent div\n    this._renderer.setSize(this._width, this._height);\n  }\n\n  //Change the background color settings\n  changeBackgroundColor(theBackgroundColor) {\n    this._settings.setBackgroundColor(theBackgroundColor);\n    this.updateBackgroundColor();\n  }\n\n  //Update the visibility of the new background color\n  updateBackgroundColor() {\n    let newColorVal = this._settings.getCurrentBackgroundColorValue();\n    this._renderer.setClearColor(newColorVal);\n  }\n\n  animate() {\n    requestAnimationFrame(() => this.animate());\n\n    //update the controls\n    if (this._cameraControlsManager.bCameraControlsEnabled) {\n      this._cameraControlsManager.updateControls();\n    }\n\n    this.animateMechanism();\n    this._animHooks.forEach((hook) => {\n      hook.animate();\n    });\n    this.render();\n  }\n\n  animateMechanism() {\n    if (this._mechanism == null || this._mechanism === undefined) {\n      return;\n    }\n\n    if (\n      this._transformControls == null ||\n      this._transformControls === undefined\n    ) {\n      if (this._simulateMotion) {\n        this._mechanism.simulateMotion();\n      }\n    } else {\n      this._mechanism.trackTarget(\n        this._target.getWorldPosition(new THREE.Vector3())\n      );\n    }\n    this._mechanism.animate();\n  }\n\n  render() {\n    this._renderer.render(this._scene, this._cameraManager.camera);\n  }\n}\n\nexport { Visualizer, BackgroundColorEnum, CameraViewEnum };\n","import * as THREE from \"three\";\nimport { STLLoader } from \"three/examples/jsm/loaders/STLLoader.js\";\n\nfunction addVisualMeshesToMechanism(\n    mechanism,\n    meshUrlBase = process.env.PUBLIC_URL + \"/models/wheatley/skeleton.stl\",\n    meshUrlYawRod = process.env.PUBLIC_URL + \"/models/wheatley/yaw_rod.stl\",\n    meshUrlYawRodMount = process.env.PUBLIC_URL + \"/models/wheatley/yaw_rod_mount.stl\",\n    meshUrlCenterPlatform = process.env.PUBLIC_URL + \"/models/wheatley/center_platform.stl\",\n    meshUrlServoPitchRollLeft = process.env.PUBLIC_URL + \"/models/servo/s3003.stl\",\n    meshUrlServoPitchRollRight = process.env.PUBLIC_URL + \"/models/servo/s3003.stl\",\n    meshUrlServoYaw = process.env.PUBLIC_URL + \"/models/servo/s3003.stl\",\n    meshUrlServoHorn = process.env.PUBLIC_URL + \"/models/horn/MG90s_arm.stl\",\n    meshUrlBallJoint = process.env.PUBLIC_URL + \"/models/ball-joint/m3_ball_joint.stl\",\n) {\n    const loader = new STLLoader();\n    // Materials\n    const materialBase = new THREE.MeshPhongMaterial({\n        color: 0xaaaaaa,\n        specular: 0x111111,\n        shininess: 200,\n        opacity: 0.5,\n        transparent: true,\n    });\n    const materialServo = new THREE.MeshBasicMaterial({\n        color: 0x404040,\n        opacity: 0.5,\n        transparent: true,\n    });\n    const materialServoHorn = new THREE.MeshBasicMaterial({\n        color: 0xf5f5f5,\n        opacity: 0.5,\n        transparent: true,\n    });\n    const materialBallJoint = new THREE.MeshBasicMaterial({\n        color: 0x303030,\n        opacity: 0.5,\n        transparent: true,\n    });\n\n    // Skeleton\n    loader.load(\n        meshUrlBase,\n        function (geometry) {\n            const mesh = new THREE.Mesh(geometry, materialBase);\n            mesh.rotation.set(-Math.PI / 2, 0, 0);\n            mesh.castShadow = true;\n            mesh.receiveShadow = true;\n            mechanism.getBase().add(mesh);\n        }\n    );\n\n    // Platform Stand - Yaw rod\n    loader.load(\n        meshUrlYawRod,\n        function (geometry) {\n            const mesh = new THREE.Mesh(geometry, materialBase);\n            mesh.rotation.set(-Math.PI / 2, 0, 0);\n            mechanism.getPlatformStand().add(mesh);\n        }\n    );\n    // Platform stand - Linkage Mount\n    loader.load(\n        meshUrlYawRodMount,\n        function (geometry) {\n            const mesh = new THREE.Mesh(geometry, materialBase);\n            mesh.rotation.set(-Math.PI / 2, 0, 0);\n            mechanism.getPlatformStand().add(mesh);\n        }\n    );\n\n    // Platform\n    loader.load(\n        meshUrlCenterPlatform,\n        function (geometry) {\n            const mesh = new THREE.Mesh(geometry, materialBase);\n            mesh.rotation.set(-Math.PI / 2, 0, 0);\n            mechanism.getPlatform().add(mesh);\n        }\n    );\n\n    // Servos\n    for (const [servo, meshUrl] of [\n        [mechanism.getServoPitchRollLeft(), meshUrlServoPitchRollLeft],\n        [mechanism.getServoPitchRollRight(), meshUrlServoPitchRollRight],\n        [mechanism.getServoYaw(), meshUrlServoYaw]]\n    ) {\n        loader.load(\n            meshUrl,\n            function (geometry) {\n                const mesh = new THREE.Mesh(geometry, materialServo);\n                servo.add(mesh);\n            }\n        );\n        loader.load(\n            meshUrlServoHorn,\n            function (geometry) {\n                const mesh = new THREE.Mesh(geometry, materialServoHorn);\n                mesh.rotation.set(Math.PI, 0, 0);\n                servo.getHorn().add(mesh);\n            }\n        );\n    }\n\n    for (const bJoint of [\n        mechanism.getPlatformStand().getBallJoint(),\n        mechanism.getServoPitchRollLeft().getHorn().getBallJoint(),\n        mechanism.getServoPitchRollRight().getHorn().getBallJoint(),\n        mechanism.getServoYaw().getHorn().getBallJoint(),\n        mechanism.getPlatformStand().getBallJoint(),\n        mechanism.getPlatform().getBallJointLeft(),\n        mechanism.getPlatform().getBallJointRight(),\n    ]) {\n        loader.load(\n            meshUrlBallJoint,\n            function (geometry) {\n                const mesh = new THREE.Mesh(geometry, materialBallJoint);\n                mesh.position.set(0, 0, 0);\n                mesh.rotation.set(-Math.PI / 2, 0, 0);\n                let scaleFactor = 0.15;\n                mesh.scale.set(scaleFactor, scaleFactor, scaleFactor);\n                bJoint.add(mesh);\n            }\n        );\n    }\n\n    // Axes Helpers\n    mechanism.getPlatform().add(new THREE.AxesHelper(30));\n    mechanism.getPlatformStand().add(new THREE.AxesHelper(15));\n\n    for (const servo of [\n        mechanism.getServoPitchRollLeft(),\n        mechanism.getServoPitchRollRight(),\n        mechanism.getServoYaw()\n    ]) {\n        servo.add(new THREE.AxesHelper(8));\n        servo.getHorn().add(new THREE.AxesHelper(8));\n        servo.getHorn().getBallJoint().add(new THREE.AxesHelper(5));\n    }\n}\n\nexport { addVisualMeshesToMechanism }","import * as THREE from \"three\";\n\nfunction vectorToFixedString(v, fractionDigits = 1) {\n    return `${v.x.toFixed(fractionDigits)},${v.y.toFixed(fractionDigits)},${v.z.toFixed(fractionDigits)}`\n}\n\nclass MechanismDebugHudComponent {\n    constructor() {\n        this._isDisposed = false;\n        this._mount = null;\n        this._visualizer = null;\n        this._mechanism = null;\n\n        this._dispServoLeft = null;\n        this._dispServoHornLeft = null;\n        this._dispPlatformAnchorLeft = null;\n        this._dispConnectingRodLeft = null;\n\n        this._dispServoRight = null;\n        this._dispServoHornRight = null;\n        this._dispPlatformAnchorRight = null;\n        this._dispConnectingRodRight = null;\n\n        this._dispServoYaw = null;\n        this._dispServoHornYaw = null;\n        this._dispPlatformStandAnchorYaw = null\n        this._dispConnectingRodYaw = null;\n\n        // this._dispExtra = null;\n    }\n\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n\n        this._isDisposed = true;\n\n        [\n            this._dispServoLeft,\n            this._dispServoHornLeft,\n            this._dispPlatformAnchorLeft,\n            this._dispConnectingRodLeft,\n            this._dispServoRight,\n            this._dispServoHornRight,\n            this._dispPlatformAnchorRight,\n            this._dispConnectingRodRight,\n            this._dispServoYaw,\n            this._dispServoHornYaw,\n            this._dispPlatformStandAnchorYaw,\n            this._dispConnectingRodYaw,\n            // this._dispExtra,\n        ].forEach(elem => {\n            this._mount.removeChild(elem);\n            elem.remove();\n        });\n\n        this._dispServoLeft = null;\n        this._dispServoHornLeft = null;\n        this._dispPlatformAnchorLeft = null;\n        this._dispConnectingRodLeft = null;\n\n        this._dispServoRight = null;\n        this._dispServoHornRight = null;\n        this._dispPlatformAnchorRight = null;\n        this._dispConnectingRodRight = null;\n\n        this._dispServoYaw = null;\n        this._dispServoHornYaw = null;\n        this._dispPlatformStandAnchorYaw = null\n        this._dispConnectingRodYaw = null;\n\n\n        this._mount = null;\n        this._visualizer = null;\n        this._mechanism = null;\n    }\n\n    init(mount, visualizer) {\n        if (this._isDisposed) {\n            return;\n        }\n\n        this._mount = mount;\n        this._visualizer = visualizer;\n        this._mechanism = visualizer._mechanism;\n\n        ////////////////////////////////////////////////////////////////////\n        this._dispServoLeft = document.createElement(\"div\");\n        this._dispServoHornLeft = document.createElement(\"div\");\n        this._dispPlatformAnchorLeft = document.createElement(\"div\");\n        this._dispConnectingRodLeft = document.createElement(\"div\");\n\n        this._dispServoRight = document.createElement(\"div\");\n        this._dispServoHornRight = document.createElement(\"div\");\n        this._dispPlatformAnchorRight = document.createElement(\"div\");\n        this._dispConnectingRodRight = document.createElement(\"div\");\n\n        this._dispServoYaw = document.createElement(\"div\");\n        this._dispServoHornYaw = document.createElement(\"div\");\n        this._dispPlatformStandAnchorYaw = document.createElement(\"div\");\n        this._dispConnectingRodYaw = document.createElement(\"div\");\n        // this._dispExtra = document.createElement(\"div\");\n\n        [\n            this._dispServoLeft,\n            this._dispServoHornLeft,\n            this._dispPlatformAnchorLeft,\n            this._dispConnectingRodLeft,\n            this._dispServoRight,\n            this._dispServoHornRight,\n            this._dispPlatformAnchorRight,\n            this._dispConnectingRodRight,\n            this._dispServoYaw,\n            this._dispServoHornYaw,\n            this._dispPlatformStandAnchorYaw,\n            this._dispConnectingRodYaw,\n            // this._dispExtra,\n        ].forEach(elem => {\n            elem.textContent = \"placeholder\";\n            this._mount.appendChild(elem);\n        });\n    }\n\n    animate() {\n        if (this._isDisposed) {\n            return;\n        }\n\n        ////////////////////////////////////////////////////////////////////\n        // update the display text for left and right servo\n        this.updateElement(\n            this._dispServoLeft,\n            this._mechanism._servo_PitchRoll_left.getWorldPosition(new THREE.Vector3()),\n            `Rotation: ${this._mechanism.getServoAngle_Left().toFixed(2)}rad`\n        )\n        this.updateElement(\n            this._dispServoRight,\n            this._mechanism._servo_PitchRoll_right.getWorldPosition(new THREE.Vector3()),\n            `Rotation: ${this._mechanism.getServoAngle_Right().toFixed(2)}rad`\n        )\n\n        ////////////////////////////////////////////////////////////////////\n        // update the display text for left and right connecting rods\n        this.updateElement(\n            this._dispConnectingRodLeft,\n            this._mechanism.getConnectingRodMidPoint_Left_WorldPosition(),\n            `Len: ${this._mechanism.getConnectingRodLength_Left().toFixed(2)}`\n        )\n        this.updateElement(\n            this._dispConnectingRodRight,\n            this._mechanism.getConnectingRodMidPoint_Right_WorldPosition(),\n            `Len: ${this._mechanism.getConnectingRodLength_Right().toFixed(2)}`\n        )\n\n        ////////////////////////////////////////////////////////////////////\n        // update the display text for left and right servo horn anchors\n        const hornBjLeft = this._mechanism._servo_PitchRoll_left\n            .getHorn()\n            .getBallJoint()\n            .getWorldPosition(new THREE.Vector3());\n        this.updateElement(\n            this._dispServoHornLeft,\n            hornBjLeft,\n            vectorToFixedString(hornBjLeft)\n        )\n        const hornBjRight = this._mechanism._servo_PitchRoll_right\n            .getHorn()\n            .getBallJoint()\n            .getWorldPosition(new THREE.Vector3());\n        this.updateElement(\n            this._dispServoHornRight,\n            hornBjRight,\n            vectorToFixedString(hornBjRight)\n        )\n\n        ////////////////////////////////////////////////////////////////////\n        // update the display text for left and right platform anchors\n        const platformAnchorLeft = this._mechanism._platform\n            .getBallJointLeft()\n            .getWorldPosition(new THREE.Vector3());\n        this.updateElement(\n            this._dispPlatformAnchorLeft,\n            platformAnchorLeft,\n            vectorToFixedString(platformAnchorLeft)\n        )\n        const platformAnchorRight = this._mechanism._platform\n            .getBallJointRight()\n            .getWorldPosition(new THREE.Vector3());\n        this.updateElement(\n            this._dispPlatformAnchorRight,\n            platformAnchorRight,\n            vectorToFixedString(platformAnchorRight)\n        )\n\n        ////////////////////////////////////////////////////////////////////\n        // update the display text for yaw components\n        this.updateElement(\n            this._dispServoYaw,\n            this._mechanism._servo_Yaw.getWorldPosition(new THREE.Vector3()),\n            `Rotation: ${this._mechanism.getYawServoAngle().toFixed(2)}rad`\n        )\n        this.updateElement(\n            this._dispConnectingRodYaw,\n            this._mechanism.getYawConnectingRodMidPoint_WorldPosition(),\n            `Len: ${this._mechanism.getYawConnectingRodLength().toFixed(2)}`\n        )\n        const hornBjYaw = this._mechanism._servo_Yaw\n            .getHorn()\n            .getBallJoint()\n            .getWorldPosition(new THREE.Vector3());\n        this.updateElement(\n            this._dispServoHornYaw,\n            hornBjYaw,\n            vectorToFixedString(hornBjYaw)\n        )\n        const platformStandAnchor = this._mechanism._platformStand\n            .getBallJoint()\n            .getWorldPosition(new THREE.Vector3());\n        this.updateElement(\n            this._dispPlatformStandAnchorYaw,\n            platformStandAnchor,\n            vectorToFixedString(platformStandAnchor)\n        )\n        ////////////////////////////////////////////////////////////////////\n        // this.updateElement(\n        //   this._dispExtra,\n        //   new THREE.Vector3(),\n        //   \"origin\"\n        // )\n    }\n\n    updateElement(dispElem, worldPosition, msg) {\n        // get the normalized screen coordinate of that position\n        // x and y will be in the -1 to +1 range with x = -1 being\n        // on the left and y = -1 being on the bottom\n        worldPosition.project(this._visualizer._cameraManager.camera);\n        // convert the normalized position to CSS coordinates\n        const x = (worldPosition.x * .5 + .5) * this._visualizer._width;\n        const y = (worldPosition.y * -.5 + .5) * this._visualizer._height;\n        // move the elem to that position\n        dispElem.style.transform = `translate(-50%, -50%) translate(${x}px,${y}px)`;\n        dispElem.textContent = msg\n    }\n}\n\nclass DebugHUD {\n    constructor() {\n        this._mount = null;\n        this._visualizer = null;\n        this._componentsByName = []\n    }\n\n    init(mount, visualizer) {\n        this._mount = mount;\n        this._visualizer = visualizer;\n        this.animate();\n    }\n\n    hasComponent(name) {\n        return name in this._componentsByName;\n    }\n\n    addOrReplaceHUDComponentByName(name, component) {\n        this.removeHudComponentByName(name);\n        component.init(this._mount, this._visualizer)\n        this._componentsByName[name] = component;\n    }\n\n    removeHudComponentByName(name) {\n        if (this.hasComponent(name)) {\n            this._componentsByName[name].dispose();\n            delete this._componentsByName[name];\n        }\n    }\n\n    animate() {\n        for (const [key, component] of Object.entries(this._componentsByName)) {\n            component.animate();\n        }\n    }\n}\n\nexport { DebugHUD, MechanismDebugHudComponent };\n","import React from \"react\";\nimport { Visualizer } from \"../modules/Graphics\";\nimport { DebugHUD, MechanismDebugHudComponent } from \"../modules/Hud\";\n\nconst VisualizerStateContext = React.createContext();\nconst VisualizerDispatchContext = React.createContext();\n\nfunction visualizerReducer(state, action) {\n  switch (action.type) {\n    case \"init\": {\n      state.visualizer.init(action.visualizerMount);\n      state.debugHUD.init(action.hudMount, state.visualizer);\n      state.visualizer.addAnimHook(state.debugHUD);\n      return state;\n    }\n    case \"change_view\": {\n      state.visualizer.changeView(action.view);\n      return state;\n    }\n    case \"change_background_color\": {\n      state.visualizer.changeBackgroundColor(action.color);\n      return state;\n    }\n    case \"activate_target_control\": {\n      state.visualizer.activateTargetMode();\n      return state;\n    }\n    case \"deactivate_target_control\": {\n      state.visualizer.deactivateTargetMode();\n      return state;\n    }\n    case \"toggle_debug_info\": {\n      const componentName = \"debug\";\n      if (state.debugHUD.hasComponent(componentName)) {\n        state.debugHUD.removeHudComponentByName(componentName);\n      }\n      else {\n        state.debugHUD.addOrReplaceHUDComponentByName(componentName, new MechanismDebugHudComponent());\n      }\n      return state;\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`);\n    }\n  }\n}\n\nfunction VisualizerProvider({ children }) {\n  const [state, dispatch] = React.useReducer(visualizerReducer, {\n    visualizer: new Visualizer(),\n    debugHUD: new DebugHUD(),\n  });\n  return (\n    <VisualizerStateContext.Provider value={state}>\n      <VisualizerDispatchContext.Provider value={dispatch}>\n        {children}\n      </VisualizerDispatchContext.Provider>\n    </VisualizerStateContext.Provider>\n  );\n}\n\nexport {\n  VisualizerProvider,\n  VisualizerStateContext,\n  VisualizerDispatchContext\n};\n","import React, { useContext } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { VisualizerDispatchContext } from \"../context/VisualizerContext\";\nimport { VisualizerStateContext } from \"../context/VisualizerContext\";\n\nfunction Settings() {\n  const dispatch = useContext(VisualizerDispatchContext);\n  const vizContext = useContext(VisualizerStateContext);\n\n  return (\n    <div>\n      <h1>Settings...</h1>\n      <Button\n        variant=\"primary\"\n        size=\"lg\"\n        block\n        onClick={() => {\n            dispatch({\n              type: \"toggle_debug_info\"\n            })\n          }\n        }\n      >\n        Toggle Debug HUD\n      </Button>\n      <Button\n        variant=\"primary\"\n        size=\"lg\"\n        block\n        onClick={() => {\n          vizContext.visualizer.toggleMechanismSimulatedMotion();\n        }}\n      >\n        Toggle Simulated Motion\n      </Button>\n      <Button\n        variant=\"primary\"\n        size=\"lg\"\n        block\n        onClick={() => {\n          vizContext.visualizer.resetMechanismOrientation();\n        }}\n      >\n        Reset Orientation\n      </Button>\n    </div>\n  );\n}\n\nexport default Settings;\n","import React from \"react\";\nimport Settings from \"./Settings\";\n\nimport { Tab, Tabs } from \"react-bootstrap\";\n\nfunction Sidebar() {\n  return (\n    <div>\n      <Tabs defaultActiveKey=\"settings\" id=\"uncontrolled-tab-example\">\n        <Tab eventKey=\"settings\" title=\"Settings\">\n          <Settings/>\n        </Tab>\n        <Tab eventKey=\"disabled_example\" title=\"Disabled\" disabled>\n          Disabled example text...\n        </Tab>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport \"./VisualizerDisplay.css\";\nimport { VisualizerDispatchContext } from \"../context/VisualizerContext\";\n\nclass VisualizerDisplay extends React.Component {\n  static contextType = VisualizerDispatchContext;\n\n  componentDidMount() {\n    const dispatch = this.context;\n    dispatch({ type: \"init\", visualizerMount: this.visualizerMount, hudMount: this.hudMount });\n  }\n\n  render() {\n    return (\n      <div\n        className=\"Visualizer-window\"\n        ref={mount => {\n          this.visualizerMount = mount;\n        }}\n      >\n        <div \n          id=\"debug-hud\"\n          ref = {mount => {\n            this.hudMount = mount;\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default VisualizerDisplay;\n","import React, { useContext } from \"react\";\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport { VisualizerDispatchContext } from \"../context/VisualizerContext\";\nimport { CameraViewEnum, BackgroundColorEnum } from \"../modules/Graphics\";\n\nfunction CameraViewSelector() {\n  const dispatch = useContext(VisualizerDispatchContext);\n\n  return (\n    <NavDropdown title=\"Camera View\" id=\"basic-nav-dropdown\">\n      {Object.keys(CameraViewEnum.properties).map((key, index) => {\n        return (\n          <NavDropdown.Item\n            key={index}\n            onClick={() =>\n              dispatch({\n                type: \"change_view\",\n                view: CameraViewEnum.properties[key].value\n              })\n            }\n          >\n            {CameraViewEnum.properties[key].displayName}\n          </NavDropdown.Item>\n        );\n      })}\n    </NavDropdown>\n  );\n}\n\nfunction BackgroundColorSelector() {\n  const dispatch = useContext(VisualizerDispatchContext);\n  return (\n    <NavDropdown title=\"Background Color\" id=\"basic-nav-dropdown\">\n      {Object.keys(BackgroundColorEnum.properties).map((key, index) => {\n        return (\n          <NavDropdown.Item\n            key={index}\n            onClick={() =>\n              dispatch({\n                type: \"change_background_color\",\n                color: BackgroundColorEnum.properties[key].value\n              })\n            }\n          >\n            {BackgroundColorEnum.properties[key].displayName}\n          </NavDropdown.Item>\n        );\n      })}\n    </NavDropdown>\n  );\n}\n\nfunction TargetControlSelector() {\n  const dispatch = useContext(VisualizerDispatchContext);\n  return (\n    <NavDropdown title=\"Target Control\" id=\"basic-nav-dropdown\">\n      <NavDropdown.Item\n        onClick={() =>\n          dispatch({\n            type: \"deactivate_target_control\"\n          })\n        }\n      >\n        Off\n      </NavDropdown.Item>\n      <NavDropdown.Item\n        onClick={() =>\n          dispatch({\n            type: \"activate_target_control\"\n          })\n        }\n      >\n        On\n      </NavDropdown.Item>\n    </NavDropdown>\n  );\n}\n\nfunction Toolbar() {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand>Stewart Simulator</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <CameraViewSelector />\n          <BackgroundColorSelector />\n          <TargetControlSelector />\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default Toolbar;\n","import React from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./ui/Sidebar\";\nimport VisualizerDisplay from \"./ui/VisualizerDisplay\";\nimport Toolbar from \"./ui/Toolbar\";\nimport { VisualizerProvider } from \"./context/VisualizerContext\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VisualizerProvider>\n        <Container fluid={true}>\n          <Row>\n            <Col>\n              <Sidebar />\n            </Col>\n            <Col xs={9}>\n              <Toolbar />\n              <VisualizerDisplay />\n            </Col>\n          </Row>\n        </Container>\n      </VisualizerProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}