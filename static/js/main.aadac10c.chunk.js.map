{"version":3,"sources":["modules/Utils.js","modules/InverseKinematics.js","modules/Mechanism.js","modules/Graphics.js","modules/Hud.js","context/VisualizerContext.js","ui/Settings.js","ui/Sidebar.js","ui/VisualizerDisplay.js","ui/Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["getEnumDefault","theEnum","key","properties","bIsDefault","sinBetween","min","max","t","speed","arguments","length","undefined","halfRange","Math","sin","calcServoAngle","q","B","a","l","s","beta","L","pow","M","z","N","cos","x","y","asin","sqrt","atan","loader","STLLoader","pos_yAxis","THREE","DefaultParameters","dist_plat_height","dist_plat_ball_joint_long","dist_plat_ball_joint_lat","long_dist_base_2_servo_pitch_roll","lat_dist_base_2_servo_pitch_roll","angle_base_2_servo_pitch_roll_mount","PI","length_servo_horn_pitch_roll","length_connecting_rod_pitch_roll","long_dist_base_2_servo_yaw","lat_dist_base_2_servo_yaw","angle_base_2_servo_yaw_mount","length_servo_horn_yaw","length_connecting_rod_yaw","long_dist_plat_stand_anchor","lat_dist_plat_stand_anchor","vertical_dist_plat_stand_anchor","Mechanism","params","_this","Object","classCallCheck","this","_super","call","_parameters","_base","Base","_servo_PitchRoll_left","Servo","_servo_PitchRoll_right","_servo_Yaw","_platformStand","PlatformStand","_platform","Platform","position","set","add","rotateY","rotateX","rotateZ","updateMatrixWorld","_clock","getHorn","getBallJoint","getWorldPosition","distanceTo","getPointInBetweenByPerc","getBallJointLeft","getBallJointRight","worldToLocal","getQVec_Left","getBVec_Left","getlDist_Left","getQVec_Right","getBVec_Right","getlDist_Right","a1","a2","p2","p1","p","subVectors","results","q2","acos","q1","push","solveIk2JointPlanar","setRotationFromAxisAngle","getServoAngle_Left","lookAt","getServoAngle_Right","getYawServoAngle","getElapsedTime","yawRange","pitchRange","rollRange","setFinalOrientation","yaw","pitch","roll","setRotationFromEuler","targetWorldPosition","sourcePoint","lookAtOrientation","setFromRotationMatrix","updateServos","_super2","color","opacity","transparent","height","long_dist_ball_joint","lat_dist_ball_joint","vertical_dist_ball_joint","_this2","geometry","translate","material","_super3","_ballJoint","BallJoint","_this3","_super4","mesh","_ballJoint_left","_ballJoint_right","servoHornLength","_this4","_super5","_self","assertThisInitialized","load","process","rotation","scale","_horn","ServoHorn","_this5","_super6","_ball_joint","_this6","_super7","pointA","pointB","percentage","dir","clone","sub","len","normalize","multiplyScalar","pos_zAxis","CameraViewEnum","PERSPECTIVE","ORTHO_TOP","ORTHO_BOTTOM","ORTHO_FRONT","ORTHO_BACK","ORTHO_LEFT","ORTHO_RIGHT","1","value","name","displayName","2","3","4","5","6","7","BackgroundColorEnum","DARK_BLUE","GREY","WHITE","textOverlayColor","r","g","b","CameraControlsManager","theCameraManager","renderer","cameraManager","controls","controlsMap","bCameraControlsEnabled","theViewType","OrbitControls","camera","domElement","enableKeys","TrackballControls","noRotate","zoomSpeed","panSpeed","staticMoving","dynamicDampingFactor","previousViewType","reset","enabled","oldViewType","bEnabled","update","CameraManager","width","WIDTH","HEIGHT","currentViewType","orthoCam","perspectiveCam","startingCamDistance","changeCamera","getOrCreatePerspectiveCamera","setCameraView","getOrCreateOrthographicCamera","up","Error","concat","ASPECT","zoom","theNewWidth","theNewHeight","aspect","updateProjectionMatrix","left","right","top","bottom","VisualizerSettings","currentBackgroundColor","distanceScale","colorChoice","MoveableTarget","Visualizer","settings","_settings","_width","_height","_scene","_renderer","_mount","_cameraManager","_cameraControlsManager","_mechanism","_target","_animHooks","_simulateMotion","mount","window","addEventListener","onCanvasResize","clientWidth","clientHeight","setClearColor","getDefaultBackgroundColorValue","setSize","append","initCamera","updateControlType","ambientLight","axisHelper","_transformControls","animate","hook","deactivateTargetMode","setCameraControlsEnabled","TransformControls","attach","detach","remove","dispose","updateAspectRatio","theBackgroundColor","setBackgroundColor","updateBackgroundColor","newColorVal","getCurrentBackgroundColorValue","requestAnimationFrame","updateControls","animateMechanism","forEach","render","simulateMotion","trackTarget","vectorToFixedString","v","fractionDigits","toFixed","MechanismDebugHudComponent","_isDisposed","_visualizer","_dispServoLeft","_dispServoHornLeft","_dispPlatformAnchorLeft","_dispConnectingRodLeft","_dispServoRight","_dispServoHornRight","_dispPlatformAnchorRight","_dispConnectingRodRight","_dispServoYaw","_dispServoHornYaw","_dispPlatformStandAnchorYaw","_dispConnectingRodYaw","elem","removeChild","visualizer","document","createElement","textContent","appendChild","updateElement","getConnectingRodMidPoint_Left_WorldPosition","getConnectingRodLength_Left","getConnectingRodMidPoint_Right_WorldPosition","getConnectingRodLength_Right","hornBjLeft","hornBjRight","platformAnchorLeft","platformAnchorRight","getYawConnectingRodMidPoint_WorldPosition","getYawConnectingRodLength","hornBjYaw","platformStandAnchor","dispElem","worldPosition","msg","project","style","transform","DebugHUD","_componentsByName","component","removeHudComponentByName","init","hasComponent","_i","_Object$entries","entries","_Object$entries$_i","slicedToArray","VisualizerStateContext","React","createContext","VisualizerDispatchContext","visualizerReducer","state","action","type","visualizerMount","debugHUD","hudMount","addAnimHook","changeView","view","changeBackgroundColor","activateTargetMode","addOrReplaceHUDComponentByName","VisualizerProvider","_ref","children","_React$useReducer","useReducer","_React$useReducer2","dispatch","react_default","Provider","Settings","useContext","vizContext","Button","variant","size","block","onClick","toggleMechanismSimulatedMotion","resetMechanismOrientation","Sidebar","Tabs","defaultActiveKey","id","Tab","eventKey","title","ui_Settings","disabled","VisualizerDisplay","context","className","ref","Component","contextType","CameraViewSelector","NavDropdown","keys","map","index","Item","BackgroundColorSelector","TargetControlSelector","Toolbar","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","App","Container","fluid","Row","Col","ui_Sidebar","xs","ui_Toolbar","src_ui_VisualizerDisplay","Boolean","location","hostname","match","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aadac10c.chunk.js","sourcesContent":["let getEnumDefault = theEnum => {\n  for (let key in theEnum) {\n    //don't consider the properties key\n    if (key === \"properties\") break;\n    if (theEnum.properties[theEnum[key]].bIsDefault) {\n      return theEnum[key];\n    }\n  }\n  return null;\n};\n\n//creates an array of length \"len\" and filled with the specified itm value\nlet createArray = (len, itm) => {\n  let arr1 = [itm],\n    arr2 = [];\n  while (len > 0) {\n    if (len & 1) arr2 = arr2.concat(arr1);\n    arr1 = arr1.concat(arr1);\n    len >>>= 1;\n  }\n  return arr2;\n};\n\nlet getEqualSpacedIntsFromRange = (min, max, numValues) => {\n  // calculate the range\n  let range = Math.abs(max - min);\n  let increment = Math.floor(range / (numValues - 1));\n\n  // check that the min is actually the min, and floor it\n  min = Math.floor(Math.min(min, max));\n\n  let values = [];\n  for (let i = 0; i < numValues; i++) {\n    values.push(min + i * increment);\n  }\n  return values;\n};\n\nlet createGUID = () => {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return (\n    s4() +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    s4() +\n    s4()\n  );\n};\n\n//converts a color encoded in javascript hex (ie: 0x000028) to css formatted hex string (ie: #000028)\nlet parseCSSColor = color => {\n  if (typeof color === \"number\") {\n    //make sure our hexadecimal number is padded out\n    color = \"#\" + (\"00000\" + (color | 0).toString(16)).substr(-6);\n  }\n  return color;\n};\n\n//calculates the contrasting color for determining overlay or text colors given a background\nlet getContrast50 = hexcolor => {\n  return parseInt(hexcolor, 16) > 0xffffff / 2 ? \"black\" : \"white\";\n};\n\nlet sinBetween = (min, max, t, speed = 1.0) => {\n  let halfRange = (max - min) / 2;\n  return min + halfRange + Math.sin(speed * t) * halfRange;\n};\n\nexport {\n  // Public Methods\n  getEnumDefault,\n  createArray,\n  getEqualSpacedIntsFromRange,\n  createGUID,\n  parseCSSColor,\n  getContrast50,\n  sinBetween\n};\n","/**\n * Calculates the servo horn angle for a pitch/roll servos\n * using closed form inverse kinematic solution.\n *\n * @param {THREE.Vector3} q - base frame vector from origin of base to platform anchor point (assume z up)\n * @param {THREE.Vector3} B - base frame vector from origin of base to center of servo arm rotation (assume z up)\n * @param {number} a - length of servo arm\n * @param {number} l - distance between the center of servo arm rotation and the platform anchor point\n * @param {number} s - length of the connecting rod\n * @param {number} beta - angle of servo horn plane relative to the forward axis of the base\n * @return {number} the calculated servo angle\n */\nlet calcServoAngle = (q, B, a, l, s, beta) => {\n  let L = Math.pow(l, 2) - (Math.pow(s, 2) - Math.pow(a, 2));\n  let M = 2 * a * (q.z - B.z);\n  let N = 2 * a * (Math.cos(beta) * (q.x - B.x) + Math.sin(beta) * (q.y - B.y));\n\n  return (\n    Math.asin(L / Math.sqrt(Math.pow(M, 2) + Math.pow(N, 2))) - Math.atan(N / M)\n  );\n};\n\n/**\n * Calculates the 2 possible sets of joint angles for a 2 joint planar linkage\n * using closed form inverse kinematic solution.\n *\n * @param {THREE.Vector2} p - the desired position of the end effector \n * @param {number} a1 - length of the first linkage arm\n * @param {number} a2 - length of the second linkage arm\n * @return {Array.<{q1: Number, q2: Number}>} the 2 possible combinations of both joint angles (q1 and q2)\n */\nlet solveIk2JointPlanar = (p, a1, a2) => {\n  // soln 1\n  let results = []\n  let q2 = Math.acos((p.x*p.x + p.y*p.y - a1*a1 - a2*a2)/(2*a1*a2)); \n\n  let q1 = Math.atan(p.y/p.x) - Math.atan((a2*Math.sin(q2))/(a1 + a2*Math.cos(q2)));\n  results.push({\"q1\": q1,\"q2\": q2});\n  \n  // soln 2\n  q2 = -q2;\n  q1 = Math.atan(p.y/p.x) + Math.atan((a2*Math.sin(q2))/(a1 + a2*Math.cos(q2)));\n  results.push({\"q1\": q1,\"q2\": q2});\n  return results;\n};\n\nexport { calcServoAngle, solveIk2JointPlanar };\n","import * as THREE from \"three\";\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\nimport { calcServoAngle, solveIk2JointPlanar } from \"./InverseKinematics\";\nimport { sinBetween } from \"./Utils\";\n\nconst loader = new STLLoader();\nconst pos_yAxis = new THREE.Vector3(0, 1, 0);\n\nconst DefaultParameters = {\n  ////////////////////////////////////////////////////////////////////\n  // platform\n  dist_plat_height: 20, // vertical distance between base and platform centers\n  dist_plat_ball_joint_long: 25, // longitudinal distance between the platform's center and an anchor\n  dist_plat_ball_joint_lat: 10, // lateral distance between the platform's center and an anchor\n\n  ////////////////////////////////////////////////////////////////////\n  // pitch roll servos, relative to base\n  long_dist_base_2_servo_pitch_roll: 20, // longitudinal distance between the base's center and a pitch roll servo\n  lat_dist_base_2_servo_pitch_roll: 20, // lateral distance between the base's center and a pitch roll servo\n  angle_base_2_servo_pitch_roll_mount: Math.PI / 6, // mount angle of the pitch roll servo\n\n  // servo horn\n  length_servo_horn_pitch_roll: 12, // distance between servo horn axis of rotation and end anchor\n\n  // connecting rod\n  length_connecting_rod_pitch_roll: 20.80511073997235, // distance between two ball joints of a connecting rod\n\n  ////////////////////////////////////////////////////////////////////\n  // yaw servo, relative to base\n  long_dist_base_2_servo_yaw: 0, // longitudinal distance between the base's center and a pitch roll servo\n  lat_dist_base_2_servo_yaw: 10, // lateral distance between the base's center and a pitch roll servo\n  angle_base_2_servo_yaw_mount: Math.PI / 2, // mount angle of the yaw servo\n\n  // servo horn\n  length_servo_horn_yaw: 8, // distance between servo horn axis of rotation and end anchor\n\n  // connecting rod\n  length_connecting_rod_yaw: 10, // distance between two ball joints of a connecting rod\n\n  ////////////////////////////////////////////////////////////////////\n  // platform stand\n  long_dist_plat_stand_anchor: 8, // longitudinal distance between the platform stand's center and an anchor\n  lat_dist_plat_stand_anchor: 0,  // lateral distance between the platform stand's center and an anchor\n  vertical_dist_plat_stand_anchor: 5, // vertical distance between the base and platform stand's anchor\n};\n\n\nclass Mechanism extends THREE.Group {\n  constructor(params) {\n    super();\n\n    // read parameters\n    this._parameters = params === undefined ? DefaultParameters : params;\n\n    // create children\n    this._base = new Base();\n    this._servo_PitchRoll_left = new Servo(this._parameters.length_servo_horn_pitch_roll);\n    this._servo_PitchRoll_right = new Servo(this._parameters.length_servo_horn_pitch_roll);\n    this._servo_Yaw = new Servo(this._parameters.length_servo_horn_yaw);\n    this._platformStand = new PlatformStand(\n      this._parameters.dist_plat_height,\n      this._parameters.long_dist_plat_stand_anchor,\n      this._parameters.lat_dist_plat_stand_anchor,\n      this._parameters.vertical_dist_plat_stand_anchor,\n    );\n    this._platform = new Platform(\n      this._parameters.dist_plat_ball_joint_long,\n      this._parameters.dist_plat_ball_joint_lat,\n    );\n\n    // Stand -> Platform\n    this._platform.position.set(0, this._parameters.dist_plat_height, 0);\n    this._platformStand.add(this._platform);\n\n    // Base -> Stand\n    this._platformStand.position.set(0, 0, 0);\n    this._base.add(this._platformStand);\n\n    // Base -> Servo Yaw\n    this._servo_Yaw.position.set(\n      this._parameters.lat_dist_base_2_servo_yaw,\n      0,\n      this._parameters.long_dist_base_2_servo_yaw\n    );\n    this._servo_Yaw.rotateY(\n      this._parameters.angle_base_2_servo_yaw_mount\n    );\n    this._base.add(this._servo_Yaw);\n\n    // Base -> Servo Left\n    this._servo_PitchRoll_left.position.set(\n      this._parameters.lat_dist_base_2_servo_pitch_roll,\n      0,\n      -this._parameters.long_dist_base_2_servo_pitch_roll\n    );\n    this._servo_PitchRoll_left.rotateX(-Math.PI / 2);\n    this._servo_PitchRoll_left.rotateZ(\n      -this._parameters.angle_base_2_servo_pitch_roll_mount\n    );\n    this._base.add(this._servo_PitchRoll_left);\n\n    // Base -> Servo Right\n    this._servo_PitchRoll_right.position.set(\n      -this._parameters.lat_dist_base_2_servo_pitch_roll,\n      0,\n      -this._parameters.long_dist_base_2_servo_pitch_roll\n    );\n    this._servo_PitchRoll_right.rotateX(-Math.PI / 2);\n    this._servo_PitchRoll_right.rotateZ(\n      this._parameters.angle_base_2_servo_pitch_roll_mount\n    );\n    this._base.add(this._servo_PitchRoll_right);\n\n    // Mechanism -> Base\n    this.add(this._base);\n\n    // post init\n    this.updateMatrixWorld();\n\n    //\n    this._clock = new THREE.Clock();\n  }\n\n  getPlatform() {\n    return this._platform;\n  }\n\n  getBase() {\n    return this._base;\n  }\n\n  getYawConnectingRodLength() {\n    return this._servo_Yaw\n      .getHorn()\n      .getBallJoint()\n      .getWorldPosition(new THREE.Vector3())\n      .distanceTo(\n        this._platformStand.getBallJoint().getWorldPosition(new THREE.Vector3())\n      );\n  }\n\n  getYawConnectingRodMidPoint_WorldPosition() {\n    return getPointInBetweenByPerc(\n      this._servo_Yaw\n        .getHorn()\n        .getBallJoint()\n        .getWorldPosition(new THREE.Vector3()),\n      this._platformStand\n        .getBallJoint()\n        .getWorldPosition(new THREE.Vector3()),\n      0.5\n    );\n  }\n\n  getConnectingRodLength_Left() {\n    return this._servo_PitchRoll_left\n      .getHorn()\n      .getBallJoint()\n      .getWorldPosition(new THREE.Vector3())\n      .distanceTo(\n        this._platform.getBallJointLeft().getWorldPosition(new THREE.Vector3())\n      );\n  }\n\n  getConnectingRodLength_Right() {\n    return this._servo_PitchRoll_right\n      .getHorn()\n      .getBallJoint()\n      .getWorldPosition(new THREE.Vector3())\n      .distanceTo(\n        this._platform.getBallJointRight().getWorldPosition(new THREE.Vector3())\n      );\n  }\n\n  getConnectingRodMidPoint_Left_WorldPosition() {\n    return getPointInBetweenByPerc(\n      this._servo_PitchRoll_left\n        .getHorn()\n        .getBallJoint()\n        .getWorldPosition(new THREE.Vector3()),\n      this._platform\n        .getBallJointLeft()\n        .getWorldPosition(new THREE.Vector3()),\n      0.5\n    );\n  }\n\n  getConnectingRodMidPoint_Right_WorldPosition() {\n    return getPointInBetweenByPerc(\n      this._servo_PitchRoll_right\n        .getHorn()\n        .getBallJoint()\n        .getWorldPosition(new THREE.Vector3()),\n      this._platform\n        .getBallJointRight()\n        .getWorldPosition(new THREE.Vector3()),\n      0.5\n    );\n  }\n\n  // base frame vector from origin of base to platform anchor point\n  getQVec_Left() {\n    // initialize with the world position of the platform anchor point\n    // then convert the world position to local \"base\" space\n    return this._base.worldToLocal(\n      this._platform.getBallJointLeft().getWorldPosition(new THREE.Vector3())\n    );\n  }\n\n  // base frame vector from origin of base to platform anchor point\n  getQVec_Right() {\n    // initialize with the world position of the platform anchor point\n    // then convert the world position to local \"base\" space\n    return this._base.worldToLocal(\n      this._platform.getBallJointRight().getWorldPosition(new THREE.Vector3())\n    );\n  }\n\n  // base frame vector from origin of base to center of servo arm rotation\n  getBVec_Left() {\n    // initialize with the world position of the center of servo arm rotation\n    // then convert the world position to local \"base\" space\n    return this._base.worldToLocal(\n      this._servo_PitchRoll_left\n        .getHorn()\n        .getWorldPosition(new THREE.Vector3())\n    );\n  }\n\n  // base frame vector from origin of base to center of servo arm rotation\n  getBVec_Right() {\n    // initialize with the world position of the center of servo arm rotation\n    // then convert the world position to local \"base\" space\n    return this._base.worldToLocal(\n      this._servo_PitchRoll_right\n        .getHorn()\n        .getWorldPosition(new THREE.Vector3())\n    );\n  }\n\n  // distance between the center of servo arm rotation and the platform anchor point\n  getlDist_Left() {\n    return this._servo_PitchRoll_left\n      .getHorn()\n      .getWorldPosition(new THREE.Vector3())\n      .distanceTo(\n        this._platform.getBallJointLeft().getWorldPosition(new THREE.Vector3())\n      );\n  }\n\n  // distance between the center of servo arm rotation and the platform anchor point\n  getlDist_Right() {\n    return this._servo_PitchRoll_right\n      .getHorn()\n      .getWorldPosition(new THREE.Vector3())\n      .distanceTo(\n        this._platform.getBallJointRight().getWorldPosition(new THREE.Vector3())\n      );\n  }\n\n  // FIXME: currently leveraging a simulated reflection so the math works... \n  // would be nice to resolve for expected coordinate system\n  getServoAngle_Left() {\n    // base frame vector from origin of base to platform anchor point\n    let q = this.getQVec_Left();\n    // base frame vector from origin of base to center of servo arm rotation\n    let B = this.getBVec_Left();\n    // length of servo arm\n    let a = this._parameters.length_servo_horn_pitch_roll;\n    // distance between the center of servo arm rotation and the platform anchor point\n    let l = this.getlDist_Left();\n    // length of the connecting rod\n    let s = this._parameters.length_connecting_rod_pitch_roll;\n\n    // angle of servo horn plane relative to base x-axis\n    let beta = -this._parameters.angle_base_2_servo_pitch_roll_mount;\n\n    // the calculated servo angle (expects vectors with for Z-up)\n    return Math.PI + calcServoAngle(\n      // simulate reflection of q and B vecs so the math from the flip scenario applies\n      new THREE.Vector3(-q.x, q.z, q.y),\n      new THREE.Vector3(-B.x, B.z, B.y),\n      a,\n      l,\n      s,\n      beta\n    );\n  }\n\n  getServoAngle_Right() {\n    // base frame vector from origin of base to platform anchor point\n    let q = this.getQVec_Right();\n    // base frame vector from origin of base to center of servo arm rotation\n    let B = this.getBVec_Right();\n    // length of servo arm\n    let a = this._parameters.length_servo_horn_pitch_roll;\n    // distance between the center of servo arm rotation and the platform anchor point\n    let l = this.getlDist_Right();\n    // length of the connecting rod\n    let s = this._parameters.length_connecting_rod_pitch_roll;\n    // angle of servo horn plane relative to base x-axis\n    let beta = -this._parameters.angle_base_2_servo_pitch_roll_mount;\n    // the calculated servo angle (expects vectors with for Z-up)\n    return -calcServoAngle(\n      new THREE.Vector3(q.x, q.z, q.y),\n      new THREE.Vector3(B.x, B.z, B.y),\n      a,\n      l,\n      s,\n      beta\n    );\n  }\n\n  getYawServoAngle() {\n    const a1 = this._parameters.length_servo_horn_yaw;\n    const a2 = this._parameters.length_connecting_rod_yaw;\n\n    // define the position of the target point for the ik solution\n    const p2 = this._platformStand\n      .getBallJoint()\n      .getWorldPosition(new THREE.Vector3());\n    const p1 = this._servo_Yaw\n      .getHorn()\n      .getWorldPosition(new THREE.Vector3())\n    let p = new THREE.Vector3();\n    p.subVectors(p2, p1);\n    p = new THREE.Vector2(-p.z, -p.x);\n    let ikSolns = solveIk2JointPlanar(p, a1, a2);\n    let q = ikSolns[0][\"q1\"];\n    return q;\n  }\n\n  updateServos() {\n    // Animate servo horns\n    this._servo_PitchRoll_left\n      .getHorn()\n      .setRotationFromAxisAngle(pos_yAxis, this.getServoAngle_Left());\n    this._servo_PitchRoll_left\n      .getHorn()\n      .getBallJoint()\n      .lookAt(    \n        this._platform\n          .getBallJointLeft()\n          .getWorldPosition(new THREE.Vector3())\n      );\n\n    this._servo_PitchRoll_right\n      .getHorn()\n      .setRotationFromAxisAngle(pos_yAxis, this.getServoAngle_Right());\n    this._servo_PitchRoll_right\n      .getHorn()\n      .getBallJoint()\n      .lookAt(    \n        this._platform\n          .getBallJointRight()\n          .getWorldPosition(new THREE.Vector3())\n      );\n\n    this._servo_Yaw\n      .getHorn()\n      .setRotationFromAxisAngle(pos_yAxis, this.getYawServoAngle());\n    \n    this._servo_Yaw\n      .getHorn()\n      .getBallJoint()\n      .lookAt(    \n        this._platformStand\n          .getBallJoint()\n          .getWorldPosition(new THREE.Vector3())\n      );\n    \n  }\n\n  simulateMotion() {\n    let t = this._clock.getElapsedTime();\n\n    // oscillate roll pitch and yaw within desired ranges\n    let yawRange = Math.PI / 10;\n    let pitchRange = Math.PI / 20;\n    let rollRange = Math.PI / 30;\n\n    this.setFinalOrientation(\n      sinBetween(yawRange, -yawRange, t, 0.5), // yaw\n      sinBetween(pitchRange, -pitchRange, 0.5 * t, 0.5), // pitch\n      sinBetween(rollRange, -rollRange, t, 5), // roll\n    )\n  }\n\n  setFinalOrientation(yaw, pitch, roll) {\n    // YAW (accomplished by rotating the platform stand)\n    this._platformStand.setRotationFromAxisAngle(\n      pos_yAxis,\n      yaw\n    );\n    // Orient the platform stand ball joint\n    this._platformStand\n      .getBallJoint()\n      .lookAt(\n        this._servo_Yaw\n          .getHorn()\n          .getBallJoint()\n          .getWorldPosition(new THREE.Vector3())\n      );\n\n    // PITCH + Roll (accomplished by rotating the platform)\n    this._platform.setRotationFromEuler(\n      new THREE.Euler(\n        pitch,\n        0,\n        roll,\n        \"XYZ\"\n      )\n    );\n\n    // Orient the platform ball joints\n    this._platform\n      .getBallJointLeft()\n      .lookAt(\n        this._servo_PitchRoll_left\n          .getHorn()\n          .getBallJoint()\n          .getWorldPosition(new THREE.Vector3())\n      );\n    this._platform\n      .getBallJointRight()\n      .lookAt(\n        this._servo_PitchRoll_right\n          .getHorn()\n          .getBallJoint()\n          .getWorldPosition(new THREE.Vector3())\n      );\n  }\n\n  trackTarget(targetWorldPosition) {\n    const sourcePoint = this._platform.getWorldPosition(new THREE.Vector3());\n    const lookAtOrientation = new THREE.Euler()\n      .setFromRotationMatrix(\n        new THREE.Matrix4()\n          .lookAt(\n            sourcePoint,        // eye \n            targetWorldPosition,// center\n            pos_yAxis,          // up vector\n          )\n      );\n    this.setFinalOrientation(\n      - lookAtOrientation.y, // yaw \n      Math.PI + lookAtOrientation.x, // pitch\n      Math.PI + lookAtOrientation.z // roll\n    );\n  }\n\n  animate() {\n    this.updateServos();\n  }\n}\n\nclass Base extends THREE.Mesh {\n  constructor() {\n    super(\n      new THREE.CylinderGeometry(25, 25, 1, 20, 32),\n      new THREE.MeshBasicMaterial({ color: 0x595959, opacity: 0.25, transparent: true })\n    );\n  }\n}\n\n// PlatformStand (Class): A StewartSimulator Mechanical Module class.\n//   Represents a platform stand.\nclass PlatformStand extends THREE.Mesh {\n  constructor(height, long_dist_ball_joint, lat_dist_ball_joint, vertical_dist_ball_joint) {\n    // create self-mesh\n    let geometry = new THREE.CylinderGeometry(4, 4, height, 20, 32);\n    geometry.translate(0, height / 2, 0);\n    let material = new THREE.MeshBasicMaterial({ color: 0x8150c3, opacity: 0.5, transparent: true });\n    super(geometry, material);\n\n    // create children\n    this._ballJoint = new BallJoint();\n    this._ballJoint.position.set(\n      lat_dist_ball_joint,\n      vertical_dist_ball_joint,\n      -long_dist_ball_joint\n    );\n    this.add(this._ballJoint);\n\n    this.add(new THREE.AxesHelper(25));\n  }\n\n  getBallJoint() {\n    return this._ballJoint;\n  }\n}\n\n// Platform (Class): A StewartSimulator Mechanical Module class.\n//   Represents a platform.\nclass Platform extends THREE.Group {\n  constructor(dist_plat_ball_joint_long, dist_plat_ball_joint_lat) {\n    super();\n\n    // create self-mesh\n    let geometry = new THREE.BoxGeometry(\n      dist_plat_ball_joint_lat * 2,\n      1,\n      dist_plat_ball_joint_long * 2\n    );\n    let material = new THREE.MeshBasicMaterial({ color: 0x5092c3, opacity: 0.5, transparent: true });\n    let mesh = new THREE.Mesh(geometry, material);\n    this.add(mesh);\n\n    // create children\n    this._ballJoint_left = new BallJoint();\n    this._ballJoint_left.position.set(\n      dist_plat_ball_joint_lat,\n      0,\n      -dist_plat_ball_joint_long\n    );\n    this.add(this._ballJoint_left);\n\n    this._ballJoint_right = new BallJoint();\n    this._ballJoint_right.position.set(\n      -dist_plat_ball_joint_lat,\n      0,\n      -dist_plat_ball_joint_long\n    );\n    this.add(this._ballJoint_right);\n\n    this.add(new THREE.AxesHelper(30));\n  }\n\n  getBallJointLeft() {\n    return this._ballJoint_left;\n  }\n\n  getBallJointRight() {\n    return this._ballJoint_right;\n  }\n}\n\n// Servo (Class): A StewartSimulator Mechanical Module class.\n//   Represents a servo.\nclass Servo extends THREE.Group {\n  constructor(servoHornLength) {\n    super();\n\n    // create servo body mesh\n    let _self = this;\n    loader.load(process.env.PUBLIC_URL + '/models/servo/MG955.stl', function (geometry) {\n      const material = new THREE.MeshBasicMaterial({ color: 0x404040, opacity: 0.5, transparent: true, });\n      const mesh = new THREE.Mesh(geometry, material);\n      mesh.position.set(3.0, 0.0, 0);\n      mesh.rotation.set(Math.PI / 2, 0, 0);\n      let scaleFactor = 7.5;\n      mesh.scale.set(scaleFactor, scaleFactor, scaleFactor);\n      _self.add(mesh);\n    });\n\n    // create children\n    this._horn = new ServoHorn(servoHornLength);\n    this._horn.position.set(0, 5, 0);\n    this.add(this._horn);\n    this.add(new THREE.AxesHelper(8));\n  }\n\n  getHorn() {\n    return this._horn;\n  }\n}\n\n// ServoHorn (Class): A StewartSimulator Mechanical Module class.\n//   Represents a servo horn.\nclass ServoHorn extends THREE.Group {\n  constructor(length) {\n    super();\n\n    // create mesh\n    let _self = this;\n    loader.load(process.env.PUBLIC_URL + '/models/horn/MG90s_arm.stl', function (geometry) {\n      const material = new THREE.MeshBasicMaterial({ color: 0xF5F5F5, opacity: 0.5, transparent: true, });\n      const mesh = new THREE.Mesh(geometry, material);\n      mesh.position.set(0, 0, 0);\n      mesh.rotation.set(Math.PI, -Math.PI/2, 0);\n      let scaleFactor = 0.75;\n      mesh.scale.set(scaleFactor * length / 12.0, scaleFactor, scaleFactor * length / 12.0);\n      _self.add(mesh);\n    });\n\n    // create children\n    this._ball_joint = new BallJoint();\n    this._ball_joint.position.set(length, 0, 0);\n\n    this.add(this._ball_joint);\n    this.add(new THREE.AxesHelper(8));\n  }\n\n  getBallJoint() {\n    return this._ball_joint;\n  }\n}\n\n// BallJoint (Class): A StewartSimulator Mechanical Module class.\n//  Represents a ball joint.\nclass BallJoint extends THREE.Group {\n  constructor(color = 0x303030) {\n    super();\n\n    // create mesh\n    let _self = this;\n    loader.load(process.env.PUBLIC_URL + '/models/ball-joint/m3_ball_joint.stl', function (geometry) {\n      const material = new THREE.MeshBasicMaterial({ color: color, opacity: 0.5, transparent: true, });\n      const mesh = new THREE.Mesh(geometry, material);\n      mesh.position.set(0, 0, 0);\n      mesh.rotation.set(-Math.PI/2, 0, 0);\n      let scaleFactor = 0.15;\n      mesh.scale.set(scaleFactor, scaleFactor, scaleFactor);\n      _self.add(mesh);\n    });\n\n    this.add(new THREE.AxesHelper(5));\n  }\n}\n\nfunction getPointInBetweenByPerc(pointA, pointB, percentage) {\n  var dir = pointB.clone().sub(pointA);\n  var len = dir.length();\n  dir = dir.normalize().multiplyScalar(len * percentage);\n  return pointA.clone().add(dir);\n}\n\nexport { Mechanism };\n","import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { TrackballControls } from \"three/examples/jsm/controls/TrackballControls.js\";\nimport { TransformControls } from \"three/examples/jsm/controls/TransformControls.js\";\nimport { getEnumDefault } from \"./Utils\";\nimport { Mechanism } from \"./Mechanism\";\n\n// const pos_xAxis = new THREE.Vector3(1, 0, 0);\n// const neg_xAxis = new THREE.Vector3(-1, 0, 0);\nconst pos_yAxis = new THREE.Vector3(0, 1, 0);\n// const neg_yAxis = new THREE.Vector3(0, -1, 0);\nconst pos_zAxis = new THREE.Vector3(0, 0, 1);\n// const neg_zAxis = new THREE.Vector3(0, 0, -1);\n// const scene_origin = new THREE.Vector3(0, 0, 0);\n\nconst CameraViewEnum = {\n  PERSPECTIVE: 1,\n  ORTHO_TOP: 2,\n  ORTHO_BOTTOM: 3,\n  ORTHO_FRONT: 4,\n  ORTHO_BACK: 5,\n  ORTHO_LEFT: 6,\n  ORTHO_RIGHT: 7,\n\n  properties: {\n    1: { value: 1, name: \"PERSPECTIVE\", displayName: \"Free Cam\" },\n    2: { value: 2, name: \"ORTHO_TOP\", displayName: \"Top View\" },\n    3: { value: 3, name: \"ORTHO_BOTTOM\", displayName: \"Bottom View\" },\n    4: { value: 4, name: \"ORTHO_FRONT\", displayName: \"Front View\" },\n    5: { value: 5, name: \"ORTHO_BACK\", displayName: \"Back View\" },\n    6: { value: 6, name: \"ORTHO_LEFT\", displayName: \"Left View\" },\n    7: { value: 7, name: \"ORTHO_RIGHT\", displayName: \"Right View\" }\n  }\n};\n\nconst BackgroundColorEnum = {\n  DARK_BLUE: 1,\n  GREY: 2,\n  WHITE: 3,\n\n  properties: {\n    1: {\n      value: 1,\n      name: \"DARK_BLUE\",\n      color: 0x151c25,\n      displayName: \"Dark Blue\",\n      bIsDefault: true,\n      textOverlayColor: { r: 255, g: 255, b: 255, a: 1.0 }\n    },\n    2: {\n      value: 2,\n      name: \"GREY\",\n      color: 0xb0b0b0,\n      displayName: \"Grey\",\n      bIsDefault: false,\n      textOverlayColor: { r: 0, g: 0, b: 0, a: 1.0 }\n    },\n    3: {\n      value: 3,\n      name: \"WHITE\",\n      color: 0xffffff,\n      displayName: \"White\",\n      bIsDefault: false,\n      textOverlayColor: { r: 0, g: 0, b: 0, a: 1.0 }\n    }\n  }\n};\n\n// CameraControlsManager (Class): A StewartSimulator Graphics module class.\n// Manages switching between various sets of controls for each view.\nclass CameraControlsManager {\n  constructor(theCameraManager, renderer) {\n    this.cameraManager = theCameraManager;\n    this.renderer = renderer;\n    this.controls = null;\n    this.controlsMap = {};\n    this.bCameraControlsEnabled = true;\n  }\n\n  //update the current camera controls to match the view type specified... create appropriate controls if they don't exist\n  updateControlType(theViewType) {\n    //if the controls for this view type haven't been initialized, create them\n    if (!(theViewType in this.controlsMap)) {\n      if (theViewType === CameraViewEnum.PERSPECTIVE) {\n        this.controlsMap[theViewType] = new OrbitControls(\n          this.cameraManager.camera,\n          this.renderer.domElement\n        );\n        this.controlsMap[theViewType].enableKeys = false;\n      } else {\n        this.controlsMap[theViewType] = new TrackballControls(\n          this.cameraManager.camera,\n          this.renderer.domElement\n        );\n        this.controlsMap[theViewType].noRotate = true;\n        this.controlsMap[theViewType].zoomSpeed = 1.0;\n        this.controlsMap[theViewType].panSpeed = 0.8;\n        this.controlsMap[theViewType].staticMoving = true;\n        this.controlsMap[theViewType].dynamicDampingFactor = 0.3;\n      }\n    }\n\n    //special case where the previous and current view types are the same (ie: just resetting the camera)\n    if (theViewType === this.cameraManager.previousViewType) {\n      this.controls.reset();\n      //set the new controls to enabled if not in tool mode\n      this.controls.enabled = this.bCameraControlsEnabled;\n      return;\n    }\n\n    //use the appropriate controls\n    this.controls = this.controlsMap[theViewType];\n    //reset the appropriate controls\n    this.controls.reset();\n\n    //disable the old controls\n    let oldViewType = this.cameraManager.previousViewType;\n    if (oldViewType in this.controlsMap) {\n      this.controlsMap[oldViewType].enabled = false;\n    }\n\n    //set the new controls to enabled if not in tool mode\n    this.controls.enabled = this.bCameraControlsEnabled;\n  }\n\n  toggleCameraControls() {\n    //toggle the camera controls\n    this.bCameraControlsEnabled = !this.bCameraControlsEnabled;\n    //set the enabled property of the current controls\n    this.controls.enabled = this.bCameraControlsEnabled;\n  }\n\n  setCameraControlsEnabled(bEnabled) {\n    this.bCameraControlsEnabled = bEnabled;\n    this.controls.enabled = this.bCameraControlsEnabled;\n  }\n\n  updateControls() {\n    this.controls.update();\n  }\n}\n\n// CameraManager (Class): A StewartSimulator Graphics module class.\n//  Manages switching between various cameras used for different views.\nclass CameraManager {\n  constructor(width, height) {\n    this.WIDTH = width;\n    this.HEIGHT = height;\n    this.camera = null;\n    this.currentViewType = null;\n    this.previousViewType = null;\n    this.orthoCam = null;\n    this.perspectiveCam = null;\n    this.startingCamDistance = 75;\n  }\n  //initialize the camera to a perspective view\n  initCamera() {\n    this.changeCamera(CameraViewEnum.PERSPECTIVE);\n  }\n\n  //Switches the camera type and camera pose to match the view type\n  changeCamera(theViewType) {\n    switch (theViewType) {\n      case CameraViewEnum.PERSPECTIVE:\n        this.camera = this.getOrCreatePerspectiveCamera();\n        this.setCameraView(theViewType);\n        break;\n      default:\n        this.camera = this.getOrCreateOrthographicCamera();\n        this.setCameraView(theViewType);\n        break;\n    }\n\n    this.previousViewType = this.currentViewType;\n    this.currentViewType = theViewType;\n  }\n\n  //sets the pose of the camera to match the desired view type\n  setCameraView(theViewType) {\n    this.camera.rotation.set(0, 0, 0);\n    switch (theViewType) {\n      case CameraViewEnum.PERSPECTIVE:\n        this.camera.position.set(0, this.startingCamDistance, 0);\n        break;\n      case CameraViewEnum.ORTHO_FRONT:\n        this.camera.position.set(0, 0, this.startingCamDistance);\n        this.camera.up = pos_yAxis; //set up vectors so that the pan function from the TrackballControls will work properly\n        break;\n      case CameraViewEnum.ORTHO_BACK:\n        this.camera.position.set(0, 0, -this.startingCamDistance);\n        this.camera.up = pos_yAxis;\n        break;\n      case CameraViewEnum.ORTHO_LEFT:\n        this.camera.position.set(-this.startingCamDistance, 0, 0);\n        this.camera.up = pos_yAxis;\n        break;\n      case CameraViewEnum.ORTHO_RIGHT:\n        this.camera.position.set(this.startingCamDistance, 0, 0);\n        this.camera.up = pos_yAxis;\n        break;\n      case CameraViewEnum.ORTHO_TOP:\n        this.camera.position.set(0, this.startingCamDistance, 0);\n        this.camera.up = pos_zAxis;\n        break;\n      case CameraViewEnum.ORTHO_BOTTOM:\n        this.camera.position.set(0, -this.startingCamDistance, 0);\n        this.camera.up = pos_zAxis;\n        break;\n      default:\n        throw Error(`Unexpected viewtype: ${theViewType}.`);\n    }\n  }\n\n  //retrieves the perspective camera or creates one if it doesn't exist\n  getOrCreatePerspectiveCamera() {\n    if (!this.perspectiveCam) {\n      // set some camera attributes\n      let FOV = 90,\n        ASPECT = this.WIDTH / this.HEIGHT,\n        NEAR = 0.1,\n        FAR = 10000;\n\n      this.perspectiveCam = new THREE.PerspectiveCamera(FOV, ASPECT, NEAR, FAR);\n    }\n    return this.perspectiveCam;\n  }\n\n  //retrieves the orthographic camera or creates one if it doesn't exist\n  getOrCreateOrthographicCamera() {\n    if (!this.orthoCam) {\n      this.orthoCam = new THREE.OrthographicCamera(\n        this.WIDTH / -2,\n        this.WIDTH / 2,\n        this.HEIGHT / 2,\n        this.HEIGHT / -2,\n        0.1,\n        10000\n      );\n      // starting zoom\n      this.orthoCam.zoom = 12.0;\n    }\n    return this.orthoCam;\n  }\n\n  //update the aspect ratio of cameras, for use in the event of a resized window\n  updateAspectRatio(theNewWidth, theNewHeight) {\n    //note the new dimensions\n    this.WIDTH = theNewWidth;\n    this.HEIGHT = theNewHeight;\n\n    //update the perspective camera if it's been created\n    if (this.perspectiveCam) {\n      this.perspectiveCam.aspect = this.WIDTH / this.HEIGHT;\n      this.perspectiveCam.updateProjectionMatrix();\n    }\n\n    //update the orthographic camera if it's been created\n    if (this.orthoCam) {\n      this.orthoCam.left = this.WIDTH / -2;\n      this.orthoCam.right = this.WIDTH / 2;\n      this.orthoCam.top = this.HEIGHT / 2;\n      this.orthoCam.bottom = this.HEIGHT / -2;\n      this.orthoCam.updateProjectionMatrix();\n    }\n  }\n}\n\n// VisualizerSettings (Class): A StewartSimulator Graphics module class.\n//  Maintains all the settings for a visualizer.\nclass VisualizerSettings {\n  constructor() {\n    this.currentBackgroundColor = getEnumDefault(BackgroundColorEnum);\n    this.distanceScale = 1.0;\n  }\n\n  getCurrentBackgroundColorValue() {\n    return BackgroundColorEnum.properties[this.currentBackgroundColor].color;\n  }\n\n  getDefaultBackgroundColorValue() {\n    return BackgroundColorEnum.properties[getEnumDefault(BackgroundColorEnum)]\n      .color;\n  }\n\n  setBackgroundColor(colorChoice) {\n    this.currentBackgroundColor = colorChoice;\n  }\n}\n\nclass MoveableTarget extends THREE.Mesh {\n  constructor() {\n    super(\n      new THREE.SphereGeometry(5, 32, 32),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 })\n    );\n  }\n}\n\n// Visualizer (Class): A StewartSimulator Graphics module class.\n// Manages the graphical visualization of the platform. Uses WebGL via THREE.js\nclass Visualizer {\n  constructor(settings = new VisualizerSettings()) {\n    this._settings = settings;\n    this._width = null;\n    this._height = null;\n    this._scene = null;\n    this._renderer = null;\n    this._mount = null;\n    this._cameraManager = null;\n    this._cameraControlsManager = null;\n    this._mechanism = null;\n    this._target = null;\n    this._animHooks = null;\n    this._simulateMotion = false;\n  }\n\n  init(mount) {\n    window.addEventListener(\"resize\", () => this.onCanvasResize(), false);\n\n    this._mount = mount;\n    this._width = this._mount.clientWidth;\n    this._height = this._mount.clientHeight;\n\n    this._scene = new THREE.Scene();\n\n    this._renderer = new THREE.WebGLRenderer();\n    this._renderer.setClearColor(\n      this._settings.getDefaultBackgroundColorValue()\n    );\n    this._renderer.setSize(this._width, this._height);\n\n    this._mount.append(this._renderer.domElement);\n\n    ////////////////////////////////////////////////////////////////////\n    //Initialize the camera manager which will manage switching between various camera views\n    this._cameraManager = new CameraManager(this._width, this._height);\n    this._cameraManager.initCamera();\n    this._scene.add(this._cameraManager.camera);\n\n    ////////////////////////////////////////////////////////////////////\n    //Initialize the camera controls manager which will manage the controls for each camera view\n    this._cameraControlsManager = new CameraControlsManager(\n      this._cameraManager,\n      this._renderer\n    );\n    this._cameraControlsManager.updateControlType(\n      this._cameraManager.currentViewType\n    );\n\n    ////////////////////////////////////////////////////////////////////\n    //Initialize the lighting for the scene\n    //create an ambient light\n    let ambientLight = new THREE.AmbientLight(0xffffff);\n    this._scene.add(ambientLight);\n\n    ////////////////////////////////////////////////////////////////////\n    //Setup the actual world geometry using the template meshes where appropriate\n    //An axis object to visualize the the 3 axes in a simple way.\n    //The X axis is red. The Y axis is green. The Z axis is blue.\n    let axisHelper = new THREE.AxesHelper(250 * this._settings.distanceScale);\n    this._scene.add(axisHelper);\n\n    ////////////////////////////////////////////////////////////////////\n    this._target = new MoveableTarget();\n    this._target.position.set(0, 25, 100);\n    this._scene.add(this._target);\n    this._transformControls = null;\n\n    ////////////////////////////////////////////////////////////////////\n    this._animHooks = [];\n\n    ////////////////////////////////////////////////////////////////////\n    this._mechanism = new Mechanism();\n    this._scene.add(this._mechanism);\n\n    ////////////////////////////////////////////////////////////////////\n    this.animate();\n  }\n\n  toggleMechanismSimulatedMotion() {\n    this._simulateMotion = !this._simulateMotion;\n  }\n\n  resetMechanismOrientation() {\n    if (this._mechanism === undefined || this._mechanism === null) {\n      return;\n    }\n    this._mechanism.setFinalOrientation(0, 0, 0);\n  }\n\n  addAnimHook(hook) {\n    this._animHooks.push(hook);\n  }\n\n  activateTargetMode() {\n    this.deactivateTargetMode();\n    this._cameraControlsManager.setCameraControlsEnabled(false);\n    this._transformControls = new TransformControls(\n      this._cameraManager.camera,\n      this._mount\n    );\n    this._transformControls.attach(this._target);\n    this._scene.add(this._transformControls);\n  }\n\n  deactivateTargetMode() {\n    if (\n      this._transformControls === undefined ||\n      this._transformControls === null\n    ) {\n      return;\n    }\n    this._transformControls.detach();\n    this._scene.remove(this._transformControls);\n    this._transformControls.dispose();\n    this._transformControls = null;\n    this._cameraControlsManager.setCameraControlsEnabled(true);\n  }\n\n  //Change the camera to the specified view and udpate the controls\n  changeView(theViewType) {\n    //remove the camera from the scene, change it and then add it back\n    this._scene.remove(this._cameraManager.camera);\n    this._cameraManager.changeCamera(theViewType);\n    this._scene.add(this._cameraManager.camera);\n\n    //update the camera controls\n    this._cameraControlsManager.updateControlType(theViewType);\n  }\n\n  //update the canvas and camera whenever the window is resized\n  onCanvasResize() {\n    //retrieve the new dimensions of the canvas' parent div\n    this._width = this._mount.clientWidth;\n    this._height = this._mount.clientHeight;\n\n    //update the aspect ratio of the cameras\n    this._cameraManager.updateAspectRatio(this._width, this._height);\n\n    //update the size of the canvas to fill its parent div\n    this._renderer.setSize(this._width, this._height);\n  }\n\n  //Change the background color settings\n  changeBackgroundColor(theBackgroundColor) {\n    this._settings.setBackgroundColor(theBackgroundColor);\n    this.updateBackgroundColor();\n  }\n\n  //Update the visibility of the new background color\n  updateBackgroundColor() {\n    let newColorVal = this._settings.getCurrentBackgroundColorValue();\n    this._renderer.setClearColor(newColorVal);\n  }\n\n  animate() {\n    requestAnimationFrame(() => this.animate());\n\n    //update the controls\n    if (this._cameraControlsManager.bCameraControlsEnabled) {\n      this._cameraControlsManager.updateControls();\n    }\n\n    this.animateMechanism();\n    this._animHooks.forEach(hook => {\n      hook.animate();\n    });\n    this.render();\n  }\n\n  animateMechanism() {\n    if (this._mechanism == null || this._mechanism === undefined) {\n      return;\n    }\n\n    if (\n      this._transformControls == null ||\n      this._transformControls === undefined\n    ) {\n      if (this._simulateMotion) {\n        this._mechanism.simulateMotion();\n      }\n    } else {\n      this._mechanism.trackTarget(\n        this._target.getWorldPosition(new THREE.Vector3())\n      );\n    }\n    this._mechanism.animate();\n  }\n\n  render() {\n    this._renderer.render(this._scene, this._cameraManager.camera);\n  }\n}\nexport { Visualizer, BackgroundColorEnum, CameraViewEnum };\n","import * as THREE from \"three\";\n\nfunction vectorToFixedString(v, fractionDigits = 1) {\n    return `${v.x.toFixed(fractionDigits)},${v.y.toFixed(fractionDigits)},${v.z.toFixed(fractionDigits)}`\n}\n\nclass MechanismDebugHudComponent {\n    constructor() {\n        this._isDisposed = false;\n        this._mount = null;\n        this._visualizer = null;\n        this._mechanism = null;\n\n        this._dispServoLeft = null;\n        this._dispServoHornLeft = null;\n        this._dispPlatformAnchorLeft = null;\n        this._dispConnectingRodLeft = null;\n\n        this._dispServoRight = null;\n        this._dispServoHornRight = null;\n        this._dispPlatformAnchorRight = null;\n        this._dispConnectingRodRight = null;\n\n        this._dispServoYaw = null;\n        this._dispServoHornYaw = null;\n        this._dispPlatformStandAnchorYaw = null\n        this._dispConnectingRodYaw = null;\n\n        // this._dispExtra = null;\n    }\n\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n\n        this._isDisposed = true;\n\n        [\n            this._dispServoLeft,\n            this._dispServoHornLeft,\n            this._dispPlatformAnchorLeft,\n            this._dispConnectingRodLeft,\n            this._dispServoRight,\n            this._dispServoHornRight,\n            this._dispPlatformAnchorRight,\n            this._dispConnectingRodRight,\n            this._dispServoYaw,\n            this._dispServoHornYaw,\n            this._dispPlatformStandAnchorYaw,\n            this._dispConnectingRodYaw,\n            // this._dispExtra,\n        ].forEach(elem => {\n            this._mount.removeChild(elem);\n            elem.remove();\n        });\n\n        this._dispServoLeft = null;\n        this._dispServoHornLeft = null;\n        this._dispPlatformAnchorLeft = null;\n        this._dispConnectingRodLeft = null;\n\n        this._dispServoRight = null;\n        this._dispServoHornRight = null;\n        this._dispPlatformAnchorRight = null;\n        this._dispConnectingRodRight = null;\n\n        this._dispServoYaw = null;\n        this._dispServoHornYaw = null;\n        this._dispPlatformStandAnchorYaw = null\n        this._dispConnectingRodYaw = null;\n\n\n        this._mount = null;\n        this._visualizer = null;\n        this._mechanism = null;\n    }\n\n    init(mount, visualizer) {\n        if (this._isDisposed) {\n            return;\n        }\n\n        this._mount = mount;\n        this._visualizer = visualizer;\n        this._mechanism = visualizer._mechanism;\n\n        ////////////////////////////////////////////////////////////////////\n        this._dispServoLeft = document.createElement(\"div\");\n        this._dispServoHornLeft = document.createElement(\"div\");\n        this._dispPlatformAnchorLeft = document.createElement(\"div\");\n        this._dispConnectingRodLeft = document.createElement(\"div\");\n\n        this._dispServoRight = document.createElement(\"div\");\n        this._dispServoHornRight = document.createElement(\"div\");\n        this._dispPlatformAnchorRight = document.createElement(\"div\");\n        this._dispConnectingRodRight = document.createElement(\"div\");\n\n        this._dispServoYaw = document.createElement(\"div\");\n        this._dispServoHornYaw = document.createElement(\"div\");\n        this._dispPlatformStandAnchorYaw = document.createElement(\"div\");\n        this._dispConnectingRodYaw = document.createElement(\"div\");\n        // this._dispExtra = document.createElement(\"div\");\n\n        [\n            this._dispServoLeft,\n            this._dispServoHornLeft,\n            this._dispPlatformAnchorLeft,\n            this._dispConnectingRodLeft,\n            this._dispServoRight,\n            this._dispServoHornRight,\n            this._dispPlatformAnchorRight,\n            this._dispConnectingRodRight,\n            this._dispServoYaw,\n            this._dispServoHornYaw,\n            this._dispPlatformStandAnchorYaw,\n            this._dispConnectingRodYaw,\n            // this._dispExtra,\n        ].forEach(elem => {\n            elem.textContent = \"placeholder\";\n            this._mount.appendChild(elem);\n        });\n    }\n\n    animate() {\n        if (this._isDisposed) {\n            return;\n        }\n\n        ////////////////////////////////////////////////////////////////////\n        // update the display text for left and right servo\n        this.updateElement(\n            this._dispServoLeft,\n            this._mechanism._servo_PitchRoll_left.getWorldPosition(new THREE.Vector3()),\n            `Rotation: ${this._mechanism.getServoAngle_Left().toFixed(2)}rad`\n        )\n        this.updateElement(\n            this._dispServoRight,\n            this._mechanism._servo_PitchRoll_right.getWorldPosition(new THREE.Vector3()),\n            `Rotation: ${this._mechanism.getServoAngle_Right().toFixed(2)}rad`\n        )\n\n        ////////////////////////////////////////////////////////////////////\n        // update the display text for left and right connecting rods\n        this.updateElement(\n            this._dispConnectingRodLeft,\n            this._mechanism.getConnectingRodMidPoint_Left_WorldPosition(),\n            `Len: ${this._mechanism.getConnectingRodLength_Left().toFixed(2)}`\n        )\n        this.updateElement(\n            this._dispConnectingRodRight,\n            this._mechanism.getConnectingRodMidPoint_Right_WorldPosition(),\n            `Len: ${this._mechanism.getConnectingRodLength_Right().toFixed(2)}`\n        )\n\n        ////////////////////////////////////////////////////////////////////\n        // update the display text for left and right servo horn anchors\n        const hornBjLeft = this._mechanism._servo_PitchRoll_left\n            .getHorn()\n            .getBallJoint()\n            .getWorldPosition(new THREE.Vector3());\n        this.updateElement(\n            this._dispServoHornLeft,\n            hornBjLeft,\n            vectorToFixedString(hornBjLeft)\n        )\n        const hornBjRight = this._mechanism._servo_PitchRoll_right\n            .getHorn()\n            .getBallJoint()\n            .getWorldPosition(new THREE.Vector3());\n        this.updateElement(\n            this._dispServoHornRight,\n            hornBjRight,\n            vectorToFixedString(hornBjRight)\n        )\n\n        ////////////////////////////////////////////////////////////////////\n        // update the display text for left and right platform anchors\n        const platformAnchorLeft = this._mechanism._platform\n            .getBallJointLeft()\n            .getWorldPosition(new THREE.Vector3());\n        this.updateElement(\n            this._dispPlatformAnchorLeft,\n            platformAnchorLeft,\n            vectorToFixedString(platformAnchorLeft)\n        )\n        const platformAnchorRight = this._mechanism._platform\n            .getBallJointRight()\n            .getWorldPosition(new THREE.Vector3());\n        this.updateElement(\n            this._dispPlatformAnchorRight,\n            platformAnchorRight,\n            vectorToFixedString(platformAnchorRight)\n        )\n\n        ////////////////////////////////////////////////////////////////////\n        // update the display text for yaw components\n        this.updateElement(\n            this._dispServoYaw,\n            this._mechanism._servo_Yaw.getWorldPosition(new THREE.Vector3()),\n            `Rotation: ${this._mechanism.getYawServoAngle().toFixed(2)}rad`\n        )\n        this.updateElement(\n            this._dispConnectingRodYaw,\n            this._mechanism.getYawConnectingRodMidPoint_WorldPosition(),\n            `Len: ${this._mechanism.getYawConnectingRodLength().toFixed(2)}`\n        )\n        const hornBjYaw = this._mechanism._servo_Yaw\n            .getHorn()\n            .getBallJoint()\n            .getWorldPosition(new THREE.Vector3());\n        this.updateElement(\n            this._dispServoHornYaw,\n            hornBjYaw,\n            vectorToFixedString(hornBjYaw)\n        )\n        const platformStandAnchor = this._mechanism._platformStand\n            .getBallJoint()\n            .getWorldPosition(new THREE.Vector3());\n        this.updateElement(\n            this._dispPlatformStandAnchorYaw,\n            platformStandAnchor,\n            vectorToFixedString(platformStandAnchor)\n        )\n        ////////////////////////////////////////////////////////////////////\n        // this.updateElement(\n        //   this._dispExtra,\n        //   new THREE.Vector3(),\n        //   \"origin\"\n        // )\n    }\n\n    updateElement(dispElem, worldPosition, msg) {\n        // get the normalized screen coordinate of that position\n        // x and y will be in the -1 to +1 range with x = -1 being\n        // on the left and y = -1 being on the bottom\n        worldPosition.project(this._visualizer._cameraManager.camera);\n        // convert the normalized position to CSS coordinates\n        const x = (worldPosition.x * .5 + .5) * this._visualizer._width;\n        const y = (worldPosition.y * -.5 + .5) * this._visualizer._height;\n        // move the elem to that position\n        dispElem.style.transform = `translate(-50%, -50%) translate(${x}px,${y}px)`;\n        dispElem.textContent = msg\n    }\n}\n\nclass DebugHUD {\n    constructor() {\n        this._mount = null;\n        this._visualizer = null;\n        this._componentsByName = []\n    }\n\n    init(mount, visualizer) {\n        this._mount = mount;\n        this._visualizer = visualizer;\n        this.animate();\n    }\n\n    hasComponent(name) {\n        return name in this._componentsByName;\n    }\n\n    addOrReplaceHUDComponentByName(name, component) {\n        this.removeHudComponentByName(name);\n        component.init(this._mount, this._visualizer)\n        this._componentsByName[name] = component;\n    }\n\n    removeHudComponentByName(name) {\n        if (this.hasComponent(name)) {\n            this._componentsByName[name].dispose();\n            delete this._componentsByName[name];\n        }\n    }\n\n    animate() {\n        for (const [key, component] of Object.entries(this._componentsByName)) {\n            component.animate();\n        }\n    }\n}\n\nexport { DebugHUD, MechanismDebugHudComponent };\n","import React from \"react\";\nimport { Visualizer } from \"../modules/Graphics\";\nimport { DebugHUD, MechanismDebugHudComponent } from \"../modules/Hud\";\n\nconst VisualizerStateContext = React.createContext();\nconst VisualizerDispatchContext = React.createContext();\n\nfunction visualizerReducer(state, action) {\n  switch (action.type) {\n    case \"init\": {\n      state.visualizer.init(action.visualizerMount);\n      state.debugHUD.init(action.hudMount, state.visualizer);\n      state.visualizer.addAnimHook(state.debugHUD);\n      return state;\n    }\n    case \"change_view\": {\n      state.visualizer.changeView(action.view);\n      return state;\n    }\n    case \"change_background_color\": {\n      state.visualizer.changeBackgroundColor(action.color);\n      return state;\n    }\n    case \"activate_target_control\": {\n      state.visualizer.activateTargetMode();\n      return state;\n    }\n    case \"deactivate_target_control\": {\n      state.visualizer.deactivateTargetMode();\n      return state;\n    }\n    case \"toggle_debug_info\": {\n      const componentName = \"debug\";\n      if (state.debugHUD.hasComponent(componentName)) {\n        state.debugHUD.removeHudComponentByName(componentName);\n      }\n      else {\n        state.debugHUD.addOrReplaceHUDComponentByName(componentName, new MechanismDebugHudComponent());\n      }\n      return state;\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`);\n    }\n  }\n}\n\nfunction VisualizerProvider({ children }) {\n  const [state, dispatch] = React.useReducer(visualizerReducer, {\n    visualizer: new Visualizer(),\n    debugHUD: new DebugHUD(),\n  });\n  return (\n    <VisualizerStateContext.Provider value={state}>\n      <VisualizerDispatchContext.Provider value={dispatch}>\n        {children}\n      </VisualizerDispatchContext.Provider>\n    </VisualizerStateContext.Provider>\n  );\n}\n\nexport {\n  VisualizerProvider,\n  VisualizerStateContext,\n  VisualizerDispatchContext\n};\n","import React, { useContext } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { VisualizerDispatchContext } from \"../context/VisualizerContext\";\nimport { VisualizerStateContext } from \"../context/VisualizerContext\";\n\nfunction Settings() {\n  const dispatch = useContext(VisualizerDispatchContext);\n  const vizContext = useContext(VisualizerStateContext);\n\n  return (\n    <div>\n      <h1>Settings...</h1>\n      <Button\n        variant=\"primary\"\n        size=\"lg\"\n        block\n        onClick={() => {\n            dispatch({\n              type: \"toggle_debug_info\"\n            })\n          }\n        }\n      >\n        Toggle Debug Info\n      </Button>\n      <Button\n        variant=\"primary\"\n        size=\"lg\"\n        block\n        onClick={() => {\n          vizContext.visualizer.toggleMechanismSimulatedMotion();\n        }}\n      >\n        Toggle Simulated Motion\n      </Button>\n      <Button\n        variant=\"primary\"\n        size=\"lg\"\n        block\n        onClick={() => {\n          vizContext.visualizer.resetMechanismOrientation();\n        }}\n      >\n        Reset Orientation\n      </Button>\n    </div>\n  );\n}\n\nexport default Settings;\n","import React from \"react\";\nimport Settings from \"./Settings\";\n\nimport { Tab, Tabs } from \"react-bootstrap\";\n\nfunction Sidebar() {\n  return (\n    <div>\n      <Tabs defaultActiveKey=\"settings\" id=\"uncontrolled-tab-example\">\n        <Tab eventKey=\"settings\" title=\"Settings\">\n          <Settings/>\n        </Tab>\n        <Tab eventKey=\"disabled_example\" title=\"Disabled\" disabled>\n          Disabled example text...\n        </Tab>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport \"./VisualizerDisplay.css\";\nimport { VisualizerDispatchContext } from \"../context/VisualizerContext\";\n\nclass VisualizerDisplay extends React.Component {\n  static contextType = VisualizerDispatchContext;\n\n  componentDidMount() {\n    const dispatch = this.context;\n    dispatch({ type: \"init\", visualizerMount: this.visualizerMount, hudMount: this.hudMount });\n  }\n\n  render() {\n    return (\n      <div\n        className=\"Visualizer-window\"\n        ref={mount => {\n          this.visualizerMount = mount;\n        }}\n      >\n        <div \n          id=\"debug-hud\"\n          ref = {mount => {\n            this.hudMount = mount;\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default VisualizerDisplay;\n","import React, { useContext } from \"react\";\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport { VisualizerDispatchContext } from \"../context/VisualizerContext\";\nimport { CameraViewEnum, BackgroundColorEnum } from \"../modules/Graphics\";\n\nfunction CameraViewSelector() {\n  const dispatch = useContext(VisualizerDispatchContext);\n\n  return (\n    <NavDropdown title=\"Camera View\" id=\"basic-nav-dropdown\">\n      {Object.keys(CameraViewEnum.properties).map((key, index) => {\n        return (\n          <NavDropdown.Item\n            key={index}\n            onClick={() =>\n              dispatch({\n                type: \"change_view\",\n                view: CameraViewEnum.properties[key].value\n              })\n            }\n          >\n            {CameraViewEnum.properties[key].displayName}\n          </NavDropdown.Item>\n        );\n      })}\n    </NavDropdown>\n  );\n}\n\nfunction BackgroundColorSelector() {\n  const dispatch = useContext(VisualizerDispatchContext);\n  return (\n    <NavDropdown title=\"Background Color\" id=\"basic-nav-dropdown\">\n      {Object.keys(BackgroundColorEnum.properties).map((key, index) => {\n        return (\n          <NavDropdown.Item\n            key={index}\n            onClick={() =>\n              dispatch({\n                type: \"change_background_color\",\n                color: BackgroundColorEnum.properties[key].value\n              })\n            }\n          >\n            {BackgroundColorEnum.properties[key].displayName}\n          </NavDropdown.Item>\n        );\n      })}\n    </NavDropdown>\n  );\n}\n\nfunction TargetControlSelector() {\n  const dispatch = useContext(VisualizerDispatchContext);\n  return (\n    <NavDropdown title=\"Target Control\" id=\"basic-nav-dropdown\">\n      <NavDropdown.Item\n        onClick={() =>\n          dispatch({\n            type: \"deactivate_target_control\"\n          })\n        }\n      >\n        Off\n      </NavDropdown.Item>\n      <NavDropdown.Item\n        onClick={() =>\n          dispatch({\n            type: \"activate_target_control\"\n          })\n        }\n      >\n        On\n      </NavDropdown.Item>\n    </NavDropdown>\n  );\n}\n\nfunction Toolbar() {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand>Stewart Simulator</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <CameraViewSelector />\n          <BackgroundColorSelector />\n          <TargetControlSelector />\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default Toolbar;\n","import React from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./ui/Sidebar\";\nimport VisualizerDisplay from \"./ui/VisualizerDisplay\";\nimport Toolbar from \"./ui/Toolbar\";\nimport { VisualizerProvider } from \"./context/VisualizerContext\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VisualizerProvider>\n        <Container fluid={true}>\n          <Row>\n            <Col>\n              <Sidebar/>\n            </Col>\n            <Col xs={9}>\n              <Toolbar />\n              <VisualizerDisplay />\n            </Col>\n          </Row>\n        </Container>\n      </VisualizerProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}